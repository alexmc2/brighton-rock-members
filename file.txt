Please help fix my code for the development section. Next js 14 app router, supabase


There are some issues that need fixing. 

First of all, the modal isn't showing all of the fields that are specified in the new-initiative-modal

these are the items appearing in the modal, which doesn't reflect the code in the modal itself. I'm confused as to why this is happening



New Initiative or Event
Title
Initiative or event title
Description
Describe the initiative or event
Category
General
Priority
Medium
Cancel
Create

There is no placeholder in the UI for when there are no tasks. When a new initiative is created, it's not very well presented, and only contains a couple of items in a big panel. 

The initiatives-list.tsx should contain all the necessary items from the new task (development) creation, with appropriate headings, but this isn't happening. However, I do like the color coding and this should stay. 

This file should also contain pagination for when items go beyond, say, 10 



In initiative details, if the description is long, it isn't wrapped and spills out of the card. The itiative-details is also missing many of the details about the new initiative. 


There is no edit and delete functionality in the initiative details either. 

There is also an issue with the comments section. When I try to post a comment, I get this error 

fetch.js:30 
        
        
       POST https://xewzffxykxsrrkosqkfw.supabase.co/rest/v1/development_comments 403 (Forbidden)
eval @ fetch.js:30
eval @ fetch.js:51
fulfilled @ fetch.js:11
Promise.then
step @ fetch.js:13
eval @ fetch.js:14
__awaiter @ fetch.js:10
eval @ fetch.js:41
then @ PostgrestBuilder.js:65Understand this errorAI
comment-section.tsx:65 Error adding comment: {code: '42501', details: null, hint: null, message: 'new row violates row-level security policy for table "development_comments"'}code: "42501"details: nullhint: nullmessage: "new row violates row-level security policy for table \"development_comments\""[[Prototype]]: Object
overrideMethod @ hook.js:608
window.console.error @ app-index.js:33


this shouldn't be happening. 

I will provide you with all the code for the development section and I would like you to fix these errors. To help you, I will provide the code from the tasks section which works well and you can use as an example. The comments work great here without issues with security. I will provide all the code in two messages, as I can't submit it all together. Please don't start your response until I have provided all the code. 


```
// Code files extracted from brighton-rock-members/app/(default)/development
// Generated on 2024-12-01 03:39:59
// Included extensions: .tsx, .ts, .js, .jsx, .json, .sql
// Excluded files: package-lock.json, yarn.lock, pnpm-lock.yaml, .DS_Store


================================================================================
// File: development-header.tsx
================================================================================

// app/(default)/development/development-header.tsx
import NewInitiativeModal from './new-initiative-modal';

export default function DevelopmentHeader() {
  return (
    <div className="sm:flex sm:justify-between sm:items-center mb-8">
      <div className="mb-4 sm:mb-0">
        <h1 className="text-2xl md:text-3xl text-slate-800 dark:text-slate-100 font-bold">
          Development ü§ù
        </h1>
        <p className="text-slate-500 mt-1">
          Manage development initiatives, social events, and network activities
        </p>
      </div>
      <div className="grid grid-flow-col sm:auto-cols-max justify-start sm:justify-end gap-2">
        <NewInitiativeModal />
      </div>
    </div>
  );
}



================================================================================
// File: initiative-list.tsx
================================================================================

// app/(default)/development/initiative-list.tsx
'use client';

import React from 'react';
import {
  InitiativeListProps,
  DevelopmentStatus,
  DevelopmentCategory,
} from '@/types/development';
import { Card, CardHeader, CardContent, CardFooter } from '@/components/ui/card';
import Link from 'next/link';

const InitiativeList: React.FC<InitiativeListProps> = ({ initiatives }) => {
  const getStatusColor = (status: DevelopmentStatus): string => {
    const colors: Record<DevelopmentStatus, string> = {
      active:
        'bg-green-100 text-green-800 dark:bg-green-900/50 dark:text-green-200',
      completed:
        'bg-blue-100 text-blue-800 dark:bg-blue-900/50 dark:text-blue-200',
      on_hold:
        'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/50 dark:text-yellow-200',
      cancelled:
        'bg-red-100 text-red-800 dark:bg-red-900/50 dark:text-red-200',
    };
    return colors[status];
  };

  const getCategoryColor = (category: DevelopmentCategory): string => {
    const colors: Record<DevelopmentCategory, string> = {
      development_meeting:
        'bg-purple-100 text-purple-800 dark:bg-purple-900/50 dark:text-purple-200',
      social:
        'bg-pink-100 text-pink-800 dark:bg-pink-900/50 dark:text-pink-200',
      outreach:
        'bg-blue-100 text-blue-800 dark:bg-blue-900/50 dark:text-blue-200',
      policy:
        'bg-orange-100 text-orange-800 dark:bg-orange-900/50 dark:text-orange-200',
      training:
        'bg-green-100 text-green-800 dark:bg-green-900/50 dark:text-green-200',
      research:
        'bg-indigo-100 text-indigo-800 dark:bg-indigo-900/50 dark:text-indigo-200',
      general:
        'bg-slate-100 text-slate-800 dark:bg-slate-900/50 dark:text-slate-200',
    };
    return colors[category];
  };

  return (
    <div className="grid grid-cols-1 gap-6">
      {initiatives.map((initiative) => (
        <Card key={initiative.id}>
          <CardHeader>
            <div className="flex justify-between">
              <h3 className="text-lg font-semibold text-slate-800 dark:text-slate-100">
                <Link href={`/development/${initiative.id}`}>
                  {initiative.title}
                </Link>
              </h3>
              <span
                className={`inline-flex px-2.5 py-1 rounded-full text-sm font-medium ${getCategoryColor(
                  initiative.category as DevelopmentCategory
                )}`}
              >
                {initiative.category
                  .charAt(0)
                  .toUpperCase() +
                  initiative.category.slice(1).replace('_', ' ')}
              </span>
            </div>
          </CardHeader>
          <CardContent>
            <p className="text-slate-600 dark:text-slate-300">
              {initiative.description}
            </p>
          </CardContent>
          <CardFooter>
            <div className="flex items-center justify-between">
              <span
                className={`inline-flex px-2.5 py-1 rounded-full text-sm font-medium ${getStatusColor(
                  initiative.status as DevelopmentStatus
                )}`}
              >
                {initiative.status
                  .charAt(0)
                  .toUpperCase() +
                  initiative.status.slice(1).replace('_', ' ')}
              </span>
              <Link
                href={`/development/${initiative.id}`}
                className="text-coop-600 hover:text-coop-700 dark:text-coop-400 dark:hover:text-coop-300"
              >
                View Details
              </Link>
            </div>
          </CardFooter>
        </Card>
      ))}
    </div>
  );
};

export default InitiativeList;



================================================================================
// File: new-initiative-modal.tsx
================================================================================

// app/(default)/development/new-initiative-modal.tsx
'use client';

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { Plus } from 'lucide-react';
import { DevelopmentCategory, DevelopmentPriority } from '@/types/development';

export default function NewInitiativeModal() {
  const router = useRouter();
  const [isOpen, setIsOpen] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const supabase = createClientComponentClient();

  // State Variables for Controlled Inputs
  const [title, setTitle] = useState('');
  const [description, setDescription] = useState('');
  const [category, setCategory] = useState<DevelopmentCategory>('general');
  const [priority, setPriority] = useState<DevelopmentPriority>('medium');

  // Additional fields for social events
  const [eventDate, setEventDate] = useState('');
  const [location, setLocation] = useState('');
  const [maxParticipants, setMaxParticipants] = useState('');
  const [budget, setBudget] = useState('');

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    setIsSubmitting(true);
    setError(null);

    try {
      // Get Current User
      const {
        data: { user },
        error: userError,
      } = await supabase.auth.getUser();
      if (userError || !user) throw new Error('User not authenticated');

      // Prepare data for insertion
      const data: any = {
        title: title.trim(),
        description: description.trim(),
        category,
        priority,
        created_by: user.id,
      };

      // If category is 'social', include additional fields
      if (category === 'social') {
        data.event_date = eventDate ? new Date(eventDate).toISOString() : null;
        data.location = location.trim() || null;
        data.max_participants = maxParticipants
          ? parseInt(maxParticipants, 10)
          : null;
        data.budget = budget ? parseFloat(budget) : null;
      }

      // Insert Initiative into Supabase
      const { data: newInitiative, error: insertError } = await supabase
        .from('development_initiatives')
        .insert(data)
        .select(
          `
          *,
          created_by_user:profiles!development_initiatives_created_by_fkey(email, full_name)
        `
        )
        .single();

      if (insertError) throw insertError;

      // Reset Form Fields
      setTitle('');
      setDescription('');
      setCategory('general');
      setPriority('medium');
      setEventDate('');
      setLocation('');
      setMaxParticipants('');
      setBudget('');

      // Refresh Page and Close Modal
      router.refresh();
      setIsOpen(false);
    } catch (error) {
      console.error('Error creating initiative:', error);
      setError(
        error instanceof Error ? error.message : 'Failed to create initiative'
      );
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <>
      {/* Trigger Button to Open Modal */}
      <Button
        onClick={() => {
          setIsOpen(true);
        }}
        variant="default"
      >
        <Plus className="h-4 w-4 mr-2" />
        New Initiative or Event
      </Button>

      {/* Modal Dialog */}
      <Dialog open={isOpen} onOpenChange={setIsOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>New Initiative or Event</DialogTitle>
          </DialogHeader>

          {/* Error Message */}
          {error && (
            <div className="bg-red-50 dark:bg-red-900/50 text-red-600 dark:text-red-200 p-3 rounded-md text-sm">
              {error}
            </div>
          )}

          {/* Initiative Creation Form */}
          <form onSubmit={handleSubmit} className="space-y-4">
            {/* Title Field */}
            <div>
              <Label htmlFor="title">Title</Label>
              <Input
                id="title"
                name="title"
                required
                placeholder="Initiative or event title"
                value={title}
                onChange={(e) => setTitle(e.target.value)}
              />
            </div>

            {/* Description Field */}
            <div>
              <Label htmlFor="description">Description</Label>
              <Textarea
                id="description"
                name="description"
                required
                placeholder="Describe the initiative or event"
                className="min-h-[100px]"
                value={description}
                onChange={(e) => setDescription(e.target.value)}
              />
            </div>

            {/* Category Field */}
            <div>
              <Label htmlFor="category">Category</Label>
              <select
                id="category"
                name="category"
                required
                value={category}
                onChange={(e) =>
                  setCategory(e.target.value as DevelopmentCategory)
                }
                className="w-full h-10 rounded-md border border-slate-200 dark:border-slate-700 bg-white dark:bg-slate-900 px-3 py-2"
              >
                <option value="general">General</option>
                <option value="development_meeting">Development Meeting</option>
                <option value="social">Social Event</option>
                <option value="outreach">Outreach</option>
                <option value="policy">Policy</option>
                <option value="training">Training</option>
                <option value="research">Research</option>
              </select>
            </div>

            {/* Priority Field */}
            <div>
              <Label htmlFor="priority">Priority</Label>
              <select
                id="priority"
                name="priority"
                required
                value={priority}
                onChange={(e) =>
                  setPriority(e.target.value as DevelopmentPriority)
                }
                className="w-full h-10 rounded-md border border-slate-200 dark:border-slate-700 bg-white dark:bg-slate-900 px-3 py-2"
              >
                <option value="low">Low</option>
                <option value="medium">Medium</option>
                <option value="high">High</option>
                <option value="urgent">Urgent</option>
              </select>
            </div>

            {/* Additional Fields for 'social' Category */}
            {category === 'social' && (
              <>
                {/* Event Date Field */}
                <div>
                  <Label htmlFor="event_date">Event Date & Time</Label>
                  <Input
                    id="event_date"
                    name="event_date"
                    type="datetime-local"
                    value={eventDate}
                    onChange={(e) => setEventDate(e.target.value)}
                  />
                </div>

                {/* Location Field */}
                <div>
                  <Label htmlFor="location">Location</Label>
                  <Input
                    id="location"
                    name="location"
                    placeholder="Event location"
                    value={location}
                    onChange={(e) => setLocation(e.target.value)}
                  />
                </div>

                {/* Max Participants Field */}
                <div>
                  <Label htmlFor="max_participants">Max Participants</Label>
                  <Input
                    id="max_participants"
                    name="max_participants"
                    type="number"
                    min="1"
                    value={maxParticipants}
                    onChange={(e) => setMaxParticipants(e.target.value)}
                  />
                </div>

                {/* Budget Field */}
                <div>
                  <Label htmlFor="budget">Budget (¬£)</Label>
                  <Input
                    id="budget"
                    name="budget"
                    type="number"
                    min="0"
                    step="0.01"
                    value={budget}
                    onChange={(e) => setBudget(e.target.value)}
                  />
                </div>
              </>
            )}

            {/* Form Actions */}
            <div className="flex justify-end space-x-2">
              <Button
                type="button"
                variant="outline"
                onClick={() => setIsOpen(false)}
                disabled={isSubmitting}
              >
                Cancel
              </Button>
              <Button type="submit" disabled={isSubmitting}>
                {isSubmitting ? 'Creating...' : 'Create'}
              </Button>
            </div>
          </form>
        </DialogContent>
      </Dialog>
    </>
  );
}



================================================================================
// File: page.tsx
================================================================================

// app/(default)/development/page.tsx
import { Metadata } from 'next';
import DevelopmentHeader from './development-header';
import InitiativeList from './initiative-list';
import supabaseAdmin from '@/lib/supabaseAdmin';
import { DevelopmentInitiativeWithDetails } from '@/types/development';

export const metadata: Metadata = {
  title: 'Development - Brighton Rock Co-op',
  description:
    'Development, outreach and social activities for Brighton Rock Co-op',
};

// Force dynamic rendering to ensure fresh data
export const dynamic = 'force-dynamic';
export const revalidate = 0;

async function getInitiatives() {
  try {
    const { data: initiatives, error } = await supabaseAdmin
      .from('development_initiatives')
      .select(
        `
        *,
        created_by_user:profiles!development_initiatives_created_by_fkey(email, full_name)
      `
      )
      .order('created_at', { ascending: false });

    if (error) throw error;
    return initiatives as DevelopmentInitiativeWithDetails[];
  } catch (err) {
    console.error('Error fetching initiatives:', err);
    return [];
  }
}

export default async function DevelopmentPage() {
  const initiatives = await getInitiatives();

  return (
    <div className="px-4 sm:px-6 lg:px-8 py-8 w-full max-w-9xl mx-auto">
      <DevelopmentHeader />
      <InitiativeList initiatives={initiatives} />
    </div>
  );
}



================================================================================
// File: [id]/comment-section.tsx
================================================================================

// app/(default)/development/[id]/comment-section.tsx
'use client';

import { useState, useEffect } from 'react';
import { format } from 'date-fns';
import { useRouter } from 'next/navigation';
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs';
import { DevelopmentInitiativeWithDetails } from '@/types/development';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';

interface CommentSectionProps {
  initiative: DevelopmentInitiativeWithDetails;
}

export default function CommentSection({ initiative }: CommentSectionProps) {
  const router = useRouter();
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [currentUserId, setCurrentUserId] = useState<string | null>(null);
  const [editingComment, setEditingComment] = useState<string | null>(null);
  const supabase = createClientComponentClient();

  useEffect(() => {
    async function getCurrentUser() {
      const {
        data: { user },
        error: authError,
      } = await supabase.auth.getUser();
      if (authError) {
        console.error('Error fetching user:', authError);
        return;
      }
      setCurrentUserId(user?.id || null);
    }
    getCurrentUser();
  }, [supabase]);

  // Add new comment
  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    if (isSubmitting) return;

    setIsSubmitting(true);
    setError(null);

    try {
      const form = e.currentTarget;
      const formData = new FormData(form);
      const content = formData.get('content') as string;

      const { error: insertError } = await supabase
        .from('development_comments')
        .insert({
          initiative_id: initiative.id,
          content,
          user_id: currentUserId,
        });

      if (insertError) throw insertError;

      form.reset();
      router.refresh();
    } catch (err) {
      console.error('Error adding comment:', err);
      setError('Failed to add comment');
    } finally {
      setIsSubmitting(false);
    }
  };

  // Edit existing comment
  const handleEdit = async (
    commentId: string,
    e: React.FormEvent<HTMLFormElement>
  ) => {
    e.preventDefault();
    if (isSubmitting) return;

    setIsSubmitting(true);
    setError(null);

    try {
      const form = e.currentTarget;
      const formData = new FormData(form);
      const content = formData.get('content') as string;

      const { error: updateError } = await supabase
        .from('development_comments')
        .update({ content })
        .eq('id', commentId)
        .eq('user_id', currentUserId);

      if (updateError) throw updateError;

      setEditingComment(null);
      router.refresh();
    } catch (err) {
      console.error('Error updating comment:', err);
      setError('Failed to update comment');
    } finally {
      setIsSubmitting(false);
    }
  };

  // Delete comment
  const handleDelete = async (commentId: string) => {
    if (!window.confirm('Are you sure you want to delete this comment?'))
      return;

    try {
      const { error: deleteError } = await supabase
        .from('development_comments')
        .delete()
        .eq('id', commentId)
        .eq('user_id', currentUserId);

      if (deleteError) throw deleteError;

      router.refresh();
    } catch (err) {
      console.error('Error deleting comment:', err);
      setError('Failed to delete comment');
    }
  };

  // Sort comments by date (newest first)
  const sortedComments = [...initiative.comments].sort(
    (a, b) =>
      new Date(b.created_at).getTime() - new Date(a.created_at).getTime()
  );

  return (
    <div className="bg-white dark:bg-slate-800 border border-slate-200 dark:border-slate-700 rounded-lg">
      <div className="p-6">
        <h2 className="text-lg font-semibold text-slate-900 dark:text-slate-100 mb-6">
          Comments
        </h2>

        {/* Comment Form */}
        <form onSubmit={handleSubmit} className="mb-6">
          <Textarea
            name="content"
            placeholder="Add a comment..."
            className="min-h-[100px] mb-3"
            required
          />
          {error && (
            <p className="text-red-500 dark:text-red-400 text-sm mb-3">
              {error}
            </p>
          )}
          <div className="flex justify-end">
            <Button type="submit" disabled={isSubmitting}>
              {isSubmitting ? 'Posting...' : 'Post Comment'}
            </Button>
          </div>
        </form>

        {/* Comments List */}
        <div className="space-y-6">
          {sortedComments.map((comment) => (
            <div
              key={comment.id}
              className="bg-slate-50 dark:bg-slate-900/50 rounded-lg p-4"
            >
              {editingComment === comment.id ? (
                <form onSubmit={(e) => handleEdit(comment.id, e)}>
                  <Textarea
                    name="content"
                    defaultValue={comment.content}
                    className="mb-2"
                    required
                  />
                  <div className="flex justify-end gap-2">
                    <Button
                      type="button"
                      variant="outline"
                      onClick={() => setEditingComment(null)}
                    >
                      Cancel
                    </Button>
                    <Button type="submit" disabled={isSubmitting}>
                      Save
                    </Button>
                  </div>
                </form>
              ) : (
                <>
                  <div className="flex justify-between items-start mb-2">
                    <div>
                      <span className="font-medium text-slate-900 dark:text-slate-100">
                        {comment.user.full_name || comment.user.email}
                      </span>
                      <span className="text-sm text-slate-500 ml-2">
                        {format(
                          new Date(comment.created_at),
                          'MMM d, yyyy h:mm a'
                        )}
                      </span>
                    </div>
                    {currentUserId === comment.user_id && (
                      <div className="flex gap-2">
                        <button
                          onClick={() => setEditingComment(comment.id)}
                          className="text-sm text-blue-500 hover:text-blue-600 dark:text-blue-400 dark:hover:text-blue-300"
                        >
                          Edit
                        </button>
                        <button
                          onClick={() => handleDelete(comment.id)}
                          className="text-sm text-red-500 hover:text-red-600 dark:text-red-400 dark:hover:text-red-300"
                        >
                          Delete
                        </button>
                      </div>
                    )}
                  </div>
                  <p className="text-slate-600 dark:text-slate-300 whitespace-pre-wrap">
                    {comment.content}
                  </p>
                </>
              )}
            </div>
          ))}
          {sortedComments.length === 0 && (
            <p className="text-center text-slate-500 dark:text-slate-400 py-4">
              No comments yet. Be the first to comment!
            </p>
          )}
        </div>
      </div>
    </div>
  );
}



================================================================================
// File: [id]/development-actions.tsx
================================================================================

// app/(default)/development/[id]/development-actions.tsx
'use client';

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs';
import {
  DevelopmentInitiativeWithDetails,
  DevelopmentStatus,
  DevelopmentPriority,
  DevelopmentCategory,
} from '@/types/development';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { Edit, Trash2 } from 'lucide-react';

interface DevelopmentActionsProps {
  initiative: DevelopmentInitiativeWithDetails;
}

export default function DevelopmentActions({ initiative }: DevelopmentActionsProps) {
  const router = useRouter();
  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);
  const [isDeleting, setIsDeleting] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const supabase = createClientComponentClient();

  // State Variables for Controlled Inputs
  const [title, setTitle] = useState(initiative.title);
  const [description, setDescription] = useState(initiative.description || '');
  const [category, setCategory] = useState<DevelopmentCategory>(initiative.category);
  const [priority, setPriority] = useState<DevelopmentPriority>(initiative.priority);
  const [status, setStatus] = useState<DevelopmentStatus>(initiative.status);

  // Additional fields for social events
  const [eventDate, setEventDate] = useState(
    initiative.event_date ? initiative.event_date.slice(0, 16) : ''
  );
  const [location, setLocation] = useState(initiative.location || '');
  const [maxParticipants, setMaxParticipants] = useState(
    initiative.max_participants ? initiative.max_participants.toString() : ''
  );
  const [budget, setBudget] = useState(
    initiative.budget ? initiative.budget.toString() : ''
  );

  const handleEdit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    setIsSubmitting(true);
    setError(null);

    try {
      // Get Current User
      const {
        data: { user },
        error: userError,
      } = await supabase.auth.getUser();
      if (userError || !user) throw new Error('User not authenticated');

      // Prepare data for update
      const data: any = {
        title: title.trim(),
        description: description.trim(),
        category,
        priority,
        status,
      };

      if (category === 'social') {
        data.event_date = eventDate ? new Date(eventDate).toISOString() : null;
        data.location = location.trim() || null;
        data.max_participants = maxParticipants
          ? parseInt(maxParticipants, 10)
          : null;
        data.budget = budget ? parseFloat(budget) : null;
      } else {
        data.event_date = null;
        data.location = null;
        data.max_participants = null;
        data.budget = null;
      }

      // Update Initiative in Supabase
      const { data: updatedInitiative, error: updateError } = await supabase
        .from('development_initiatives')
        .update(data)
        .eq('id', initiative.id)
        .select(
          `
          *,
          created_by_user:profiles!development_initiatives_created_by_fkey(email, full_name)
        `
        )
        .single();

      if (updateError) throw updateError;

      // Optionally, update the calendar event if necessary
      // await updateInitiativeEvent(updatedInitiative.id, ...);

      // Close Modal and Refresh
      setIsEditDialogOpen(false);
      router.refresh();
    } catch (error) {
      console.error('Error updating initiative:', error);
      setError(
        error instanceof Error ? error.message : 'Failed to update initiative'
      );
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleDelete = async () => {
    if (
      !window.confirm(
        'Are you sure you want to delete this initiative? This action cannot be undone.'
      )
    ) {
      return;
    }

    try {
      setIsDeleting(true);

      // Delete initiative
      const { error: deleteError } = await supabase
        .from('development_initiatives')
        .delete()
        .eq('id', initiative.id);

      if (deleteError) throw deleteError;

      // Optionally, delete the associated calendar event if necessary
      // await deleteCalendarEvent(initiative.id);

      router.push('/development');
    } catch (error) {
      console.error('Error deleting initiative:', error);
      setError(
        error instanceof Error ? error.message : 'Failed to delete initiative'
      );
    } finally {
      setIsDeleting(false);
    }
  };

  return (
    <div className="flex items-center gap-2">
      {/* Edit Button */}
      <Button
        variant="default"
        size="sm"
        onClick={() => setIsEditDialogOpen(true)}
        disabled={isSubmitting || isDeleting}
      >
        <Edit className="h-4 w-4 mr-1" />
        Edit Initiative
      </Button>

      {/* Delete Button */}
      <Button
        variant="destructive"
        size="sm"
        onClick={handleDelete}
        disabled={isDeleting}
      >
        <Trash2 className="h-4 w-4 mr-1" />
        Delete Initiative
      </Button>

      {/* Edit Dialog */}
      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Edit Initiative</DialogTitle>
          </DialogHeader>

          {/* Error Message */}
          {error && (
            <div className="bg-red-50 dark:bg-red-900/50 text-red-600 dark:text-red-200 p-3 rounded-md text-sm">
              {error}
            </div>
          )}

          {/* Edit Initiative Form */}
          <form onSubmit={handleEdit} className="space-y-4">
            {/* Title Field */}
            <div>
              <Label htmlFor="title">Title</Label>
              <Input
                id="title"
                name="title"
                required
                placeholder="Initiative or event title"
                value={title}
                onChange={(e) => setTitle(e.target.value)}
              />
            </div>

            {/* Description Field */}
            <div>
              <Label htmlFor="description">Description</Label>
              <Textarea
                id="description"
                name="description"
                required
                placeholder="Describe the initiative or event"
                className="min-h-[100px]"
                value={description}
                onChange={(e) => setDescription(e.target.value)}
              />
            </div>

            {/* Category Field */}
            <div>
              <Label htmlFor="category">Category</Label>
              <select
                id="category"
                name="category"
                required
                value={category}
                onChange={(e) => setCategory(e.target.value as DevelopmentCategory)}
                className="w-full h-10 rounded-md border border-slate-200 dark:border-slate-700 bg-white dark:bg-slate-900 px-3 py-2"
              >
                <option value="general">General</option>
                <option value="development_meeting">Development Meeting</option>
                <option value="social">Social Event</option>
                <option value="outreach">Outreach</option>
                <option value="policy">Policy</option>
                <option value="training">Training</option>
                <option value="research">Research</option>
              </select>
            </div>

            {/* Priority Field */}
            <div>
              <Label htmlFor="priority">Priority</Label>
              <select
                id="priority"
                name="priority"
                required
                value={priority}
                onChange={(e) => setPriority(e.target.value as DevelopmentPriority)}
                className="w-full h-10 rounded-md border border-slate-200 dark:border-slate-700 bg-white dark:bg-slate-900 px-3 py-2"
              >
                <option value="low">Low</option>
                <option value="medium">Medium</option>
                <option value="high">High</option>
                <option value="urgent">Urgent</option>
              </select>
            </div>

            {/* Status Field */}
            <div>
              <Label htmlFor="status">Status</Label>
              <select
                id="status"
                name="status"
                required
                value={status}
                onChange={(e) => setStatus(e.target.value as DevelopmentStatus)}
                className="w-full h-10 rounded-md border border-slate-200 dark:border-slate-700 bg-white dark:bg-slate-900 px-3 py-2"
              >
                <option value="active">Active</option>
                <option value="completed">Completed</option>
                <option value="on_hold">On Hold</option>
                <option value="cancelled">Cancelled</option>
              </select>
            </div>

            {/* Additional Fields for 'social' Category */}
            {category === 'social' && (
              <>
                {/* Event Date Field */}
                <div>
                  <Label htmlFor="event_date">Event Date & Time</Label>
                  <Input
                    id="event_date"
                    name="event_date"
                    type="datetime-local"
                    value={eventDate}
                    onChange={(e) => setEventDate(e.target.value)}
                  />
                </div>

                {/* Location Field */}
                <div>
                  <Label htmlFor="location">Location</Label>
                  <Input
                    id="location"
                    name="location"
                    placeholder="Event location"
                    value={location}
                    onChange={(e) => setLocation(e.target.value)}
                  />
                </div>

                {/* Max Participants Field */}
                <div>
                  <Label htmlFor="max_participants">Max Participants</Label>
                  <Input
                    id="max_participants"
                    name="max_participants"
                    type="number"
                    min="1"
                    value={maxParticipants}
                    onChange={(e) => setMaxParticipants(e.target.value)}
                  />
                </div>

                {/* Budget Field */}
                <div>
                  <Label htmlFor="budget">Budget (¬£)</Label>
                  <Input
                    id="budget"
                    name="budget"
                    type="number"
                    min="0"
                    step="0.01"
                    value={budget}
                    onChange={(e) => setBudget(e.target.value)}
                  />
                </div>
              </>
            )}

            {/* Form Actions */}
            <div className="flex justify-end gap-2">
              <Button
                type="button"
                variant="outline"
                onClick={() => setIsEditDialogOpen(false)}
                disabled={isSubmitting}
              >
                Cancel
              </Button>
              <Button type="submit" disabled={isSubmitting}>
                {isSubmitting ? 'Saving...' : 'Save Changes'}
              </Button>
            </div>
          </form>
        </DialogContent>
      </Dialog>
    </div>
  );
}



================================================================================
// File: [id]/initiative-details.tsx
================================================================================

// app/(default)/development/[id]/initiative-details.tsx
import { format } from 'date-fns';
import {
  DevelopmentInitiativeWithDetails,
  DevelopmentStatus,
  DevelopmentPriority,
} from '@/types/development';
import { Card } from '@/components/ui/card';
import { Calendar, Users, PoundSterling, MapPin } from 'lucide-react';

interface InitiativeDetailsProps {
  initiative: DevelopmentInitiativeWithDetails;
}

export default function InitiativeDetails({
  initiative,
}: InitiativeDetailsProps) {
  const isSocialEvent = initiative.category === 'social';

  const getStatusColor = (status: DevelopmentStatus): string => {
    const colors: Record<DevelopmentStatus, string> = {
      active:
        'bg-green-100 text-green-800 dark:bg-green-900/50 dark:text-green-200',
      completed:
        'bg-blue-100 text-blue-800 dark:bg-blue-900/50 dark:text-blue-200',
      on_hold:
        'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/50 dark:text-yellow-200',
      cancelled: 'bg-red-100 text-red-800 dark:bg-red-900/50 dark:text-red-200',
    };
    return colors[status];
  };

  const getPriorityColor = (priority: DevelopmentPriority): string => {
    const colors: Record<DevelopmentPriority, string> = {
      low: 'bg-slate-100 text-slate-800 dark:bg-slate-900/50 dark:text-slate-200',
      medium:
        'bg-blue-100 text-blue-800 dark:bg-blue-900/50 dark:text-blue-200',
      high: 'bg-orange-100 text-orange-800 dark:bg-orange-900/50 dark:text-orange-200',
      urgent: 'bg-red-100 text-red-800 dark:bg-red-900/50 dark:text-red-200',
    };
    return colors[priority];
  };

  return (
    <Card className="p-6">
      <div className="space-y-6">
        {/* Description */}
        <div>
          <h3 className="text-sm font-medium text-slate-500 dark:text-slate-400 mb-2">
            Description
          </h3>
          <p className="text-slate-800 dark:text-slate-200 whitespace-pre-wrap">
            {initiative.description}
          </p>
        </div>

        {/* Event Details for Social Events */}
        {isSocialEvent && (
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {initiative.event_date && (
              <div>
                <h3 className="text-sm font-medium text-slate-500 dark:text-slate-400 mb-2">
                  Date & Time
                </h3>
                <div className="flex items-center text-slate-800 dark:text-slate-200">
                  <Calendar className="w-4 h-4 mr-2" />
                  {format(new Date(initiative.event_date), 'PPp')}
                </div>
              </div>
            )}

            {initiative.location && (
              <div>
                <h3 className="text-sm font-medium text-slate-500 dark:text-slate-400 mb-2">
                  Location
                </h3>
                <div className="flex items-center text-slate-800 dark:text-slate-200">
                  <MapPin className="w-4 h-4 mr-2" />
                  {initiative.location}
                </div>
              </div>
            )}

            {initiative.max_participants && (
              <div>
                <h3 className="text-sm font-medium text-slate-500 dark:text-slate-400 mb-2">
                  Participants
                </h3>
                <div className="flex items-center text-slate-800 dark:text-slate-200">
                  <Users className="w-4 h-4 mr-2" />
                  {initiative.participants?.length || 0} /{' '}
                  {initiative.max_participants} spots
                </div>
              </div>
            )}

            {initiative.budget && (
              <div>
                <h3 className="text-sm font-medium text-slate-500 dark:text-slate-400 mb-2">
                  Budget
                </h3>
                <div className="flex items-center text-slate-800 dark:text-slate-200">
                  <PoundSterling className="w-4 h-4 mr-2" />¬£
                  {initiative.budget.toFixed(2)}
                </div>
              </div>
            )}
          </div>
        )}

        {/* Status and Priority for Non-Social Events */}
        {!isSocialEvent && (
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <h3 className="text-sm font-medium text-slate-500 dark:text-slate-400 mb-2">
                Status
              </h3>
              <span
                className={`inline-flex px-2.5 py-1 rounded-full text-sm font-medium ${getStatusColor(
                  initiative.status as DevelopmentStatus
                )}`}
              >
                {initiative.status.charAt(0).toUpperCase() +
                  initiative.status.slice(1).replace('_', ' ')}
              </span>
            </div>

            <div>
              <h3 className="text-sm font-medium text-slate-500 dark:text-slate-400 mb-2">
                Priority
              </h3>
              <span
                className={`inline-flex px-2.5 py-1 rounded-full text-sm font-medium ${getPriorityColor(
                  initiative.priority as DevelopmentPriority
                )}`}
              >
                {initiative.priority.charAt(0).toUpperCase() +
                  initiative.priority.slice(1)}
              </span>
            </div>
          </div>
        )}

        {/* Created By and Dates */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6 pt-4 border-t border-slate-200 dark:border-slate-700">
          <div>
            <h3 className="text-sm font-medium text-slate-500 dark:text-slate-400 mb-2">
              Created By
            </h3>
            <p className="text-slate-800 dark:text-slate-200">
              {initiative.created_by_user.full_name ||
                initiative.created_by_user.email}
            </p>
          </div>

          <div>
            <h3 className="text-sm font-medium text-slate-500 dark:text-slate-400 mb-2">
              Created
            </h3>
            <p className="text-slate-800 dark:text-slate-200">
              {format(new Date(initiative.created_at), 'PPp')}
            </p>
          </div>

          <div>
            <h3 className="text-sm font-medium text-slate-500 dark:text-slate-400 mb-2">
              Last Updated
            </h3>
            <p className="text-slate-800 dark:text-slate-200">
              {format(new Date(initiative.updated_at), 'PPp')}
            </p>
          </div>
        </div>
      </div>
    </Card>
  );
}



================================================================================
// File: [id]/initiative-header.tsx
================================================================================

// app/(default)/development/[id]/initiative-header.tsx
import Link from 'next/link';
import {
  DevelopmentInitiativeWithDetails,
  DevelopmentCategory,
} from '@/types/development';

interface InitiativeHeaderProps {
  initiative: DevelopmentInitiativeWithDetails;
}

export default function InitiativeHeader({
  initiative,
}: InitiativeHeaderProps) {
  const getCategoryColor = (category: DevelopmentCategory): string => {
    const colors: Record<DevelopmentCategory, string> = {
      development_meeting:
        'bg-purple-100 text-purple-800 dark:bg-purple-900/50 dark:text-purple-200',
      social:
        'bg-pink-100 text-pink-800 dark:bg-pink-900/50 dark:text-pink-200',
      outreach:
        'bg-blue-100 text-blue-800 dark:bg-blue-900/50 dark:text-blue-200',
      policy:
        'bg-orange-100 text-orange-800 dark:bg-orange-900/50 dark:text-orange-200',
      training:
        'bg-green-100 text-green-800 dark:bg-green-900/50 dark:text-green-200',
      research:
        'bg-indigo-100 text-indigo-800 dark:bg-indigo-900/50 dark:text-indigo-200',
      general:
        'bg-slate-100 text-slate-800 dark:bg-slate-900/50 dark:text-slate-200',
    };
    return colors[category];
  };

  return (
    <div className="mb-8">
      <div className="flex items-center mb-4">
        <Link
          href="/development"
          className="text-sm font-medium text-coop-600 hover:text-coop-700 dark:text-coop-300 dark:hover:text-coop-100 flex items-center"
        >
          ‚Üê Back to Development
        </Link>
      </div>

      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
        <div>
          <h1 className="text-2xl sm:text-3xl font-bold text-slate-900 dark:text-slate-100">
            {initiative.title}
          </h1>
          <div className="flex items-center mt-2 space-x-3">
            <span
              className={`inline-flex px-2.5 py-1 rounded-full text-sm font-medium ${getCategoryColor(
                initiative.category as DevelopmentCategory
              )}`}
            >
              {initiative.category.charAt(0).toUpperCase() +
                initiative.category.slice(1).replace('_', ' ')}
            </span>
          </div>
        </div>
      </div>
    </div>
  );
}



================================================================================
// File: [id]/page.tsx
================================================================================

// app/(default)/development/[id]/page.tsx
import { Metadata } from 'next';
import { notFound } from 'next/navigation';
import supabaseAdmin from '@/lib/supabaseAdmin';
import InitiativeHeader from './initiative-header';
import InitiativeDetails from './initiative-details';
import CommentSection from './comment-section';
import ParticipantList from './participant-list';
import { DevelopmentInitiativeWithDetails } from '@/types/development';

export const metadata: Metadata = {
  title: 'Initiative Details - Development',
  description: 'View and manage initiative or event details',
};

async function getInitiative(id: string) {
  try {
    const { data: initiative, error } = await supabaseAdmin
      .from('development_initiatives')
      .select(
        `
        *,
        created_by_user:profiles!development_initiatives_created_by_fkey(email, full_name),
        comments:development_comments(
          *,
          user:profiles!development_comments_user_id_fkey(email, full_name)
        ),
        participants:event_participants(
          *,
          user:profiles!event_participants_user_id_fkey(email, full_name)
        )
      `
      )
      .eq('id', id)
      .single();

    if (error) throw error;
    return initiative as DevelopmentInitiativeWithDetails;
  } catch (err) {
    console.error('Error fetching initiative:', err);
    return null;
  }
}

interface InitiativePageProps {
  params: {
    id: string;
  };
}

export default async function InitiativePage({ params }: InitiativePageProps) {
  const initiative = await getInitiative(params.id);

  if (!initiative) {
    notFound();
  }

  const isSocialEvent = initiative.category === 'social';

  return (
    <div className="px-4 sm:px-6 lg:px-8 py-8 w-full max-w-9xl mx-auto">
      <InitiativeHeader initiative={initiative} />

      <div className="grid grid-cols-1 xl:grid-cols-3 gap-6 mt-6">
        <div className="xl:col-span-2 space-y-6">
          <InitiativeDetails initiative={initiative} />
          <CommentSection initiative={initiative} />
        </div>

        <div className="space-y-6">
          {isSocialEvent && (
            <ParticipantList
              initiative={initiative}
              maxParticipants={initiative.max_participants}
            />
          )}
        </div>
      </div>
    </div>
  );
}



================================================================================
// File: [id]/participant-list.tsx
================================================================================

// app/(default)/development/[id]/participant-list.tsx
'use client';

import { useState, useEffect } from 'react';
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs';
import { useRouter } from 'next/navigation';
import { Card, CardHeader, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import {
  DevelopmentInitiativeWithDetails,
  ParticipationStatus,
} from '@/types/development';
import { Users } from 'lucide-react';

interface ParticipantListProps {
  initiative: DevelopmentInitiativeWithDetails;
  maxParticipants: number | null;
}

export default function ParticipantList({
  initiative,
  maxParticipants,
}: ParticipantListProps) {
  const router = useRouter();
  const [currentUserId, setCurrentUserId] = useState<string | null>(null);
  const [isUpdating, setIsUpdating] = useState(false);
  const supabase = createClientComponentClient();

  useEffect(() => {
    async function getCurrentUser() {
      const {
        data: { user },
        error: authError,
      } = await supabase.auth.getUser();
      if (!authError && user) {
        setCurrentUserId(user.id);
      }
    }
    getCurrentUser();
  }, [supabase]);

  const currentUserParticipation = initiative.participants?.find(
    (p) => p.user_id === currentUserId
  );

  const handleParticipationUpdate = async (status: ParticipationStatus) => {
    if (!currentUserId || isUpdating) return;
    setIsUpdating(true);

    try {
      if (currentUserParticipation) {
        // Update existing participation
        const { error } = await supabase
          .from('event_participants')
          .update({ status })
          .eq('event_id', initiative.id)
          .eq('user_id', currentUserId);

        if (error) throw error;
      } else {
        // Create new participation
        const { error } = await supabase.from('event_participants').insert({
          event_id: initiative.id,
          user_id: currentUserId,
          status,
        });

        if (error) throw error;
      }

      router.refresh();
    } catch (err) {
      console.error('Error updating participation:', err);
    } finally {
      setIsUpdating(false);
    }
  };

  const participantsByStatus = {
    going: initiative.participants?.filter((p) => p.status === 'going') || [],
    maybe: initiative.participants?.filter((p) => p.status === 'maybe') || [],
    not_going:
      initiative.participants?.filter((p) => p.status === 'not_going') || [],
  };

  return (
    <Card>
      <CardHeader>
        <div className="flex items-center justify-between">
          <h3 className="text-lg font-semibold">Participants</h3>
          <div className="text-sm text-slate-500">
            {participantsByStatus.going.length}
            {maxParticipants && ` / ${maxParticipants}`} going
          </div>
        </div>
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          {/* RSVP Buttons */}
          <div className="flex items-center gap-2">
            <Button
              onClick={() => handleParticipationUpdate('going')}
              variant={
                currentUserParticipation?.status === 'going'
                  ? 'default'
                  : 'outline'
              }
              disabled={isUpdating}
            >
              Going
            </Button>
            <Button
              onClick={() => handleParticipationUpdate('maybe')}
              variant={
                currentUserParticipation?.status === 'maybe'
                  ? 'default'
                  : 'outline'
              }
              disabled={isUpdating}
            >
              Maybe
            </Button>
            <Button
              onClick={() => handleParticipationUpdate('not_going')}
              variant={
                currentUserParticipation?.status === 'not_going'
                  ? 'default'
                  : 'outline'
              }
              disabled={isUpdating}
            >
              Not Going
            </Button>
          </div>

          {/* Participant Lists */}
          {['going', 'maybe', 'not_going'].map((status) => (
            <div key={status}>
              <h4 className="font-medium text-sm text-slate-500 mb-2 capitalize">
                {status.replace('_', ' ')} (
                {participantsByStatus[status as ParticipationStatus].length})
              </h4>
              <div className="space-y-2">
                {participantsByStatus[status as ParticipationStatus].map(
                  (participant) => (
                    <div
                      key={participant.user_id}
                      className="flex items-center text-sm text-slate-600 dark:text-slate-300"
                    >
                      <Users className="w-4 h-4 mr-2" />
                      {participant.user?.full_name || participant.user?.email}
                    </div>
                  )
                )}
              </div>
            </div>
          ))}
        </div>
      </CardContent>
    </Card>
  );
}


// types/development.ts

export type DevelopmentStatus =
  | 'active'
  | 'completed'
  | 'on_hold'
  | 'cancelled';

export type DevelopmentPriority = 'low' | 'medium' | 'high' | 'urgent';

export type DevelopmentCategory =
  | 'development_meeting'
  | 'outreach'
  | 'policy'
  | 'training'
  | 'research'
  | 'social'
  | 'general';

export type ParticipationStatus = 'going' | 'maybe' | 'not_going';

export interface DevelopmentComment {
  id: string;
  initiative_id: string;
  user_id: string;
  content: string;
  created_at: string;
  user: {
    email: string;
    full_name: string | null;
  };
}

export interface EventParticipant {
  event_id: string;
  user_id: string;
  status: ParticipationStatus;
  created_at: string;
  updated_at: string;
  user?: {
    email: string;
    full_name: string | null;
  };
}

export interface DevelopmentInitiative {
  id: string;
  title: string;
  description: string;
  status: DevelopmentStatus;
  priority: DevelopmentPriority;
  category: DevelopmentCategory;
  created_by: string;
  created_at: string;
  updated_at: string;
  event_date: string | null;
  location: string | null;
  max_participants: number | null;
  budget: number | null;
}

export interface DevelopmentInitiativeWithDetails
  extends DevelopmentInitiative {
  created_by_user: {
    email: string;
    full_name: string | null;
  };
  comments: DevelopmentComment[];
  participants?: EventParticipant[];
}

export interface PartnerOrganisation {
  id: string;
  name: string;
  type: string;
  contact_email: string | null;
  website: string | null;
  notes: string | null;
  last_contact_date: string | null;
  next_meeting_date: string | null;
  created_at: string;
  updated_at: string;
}

export type PartnerType =
  | 'housing_coop'
  | 'network'
  | 'federation'
  | 'council'
  | 'charity'
  | 'other';

export interface InitiativeListProps {
  initiatives: DevelopmentInitiativeWithDetails[];
}



```

The database. Please give me any sql queries to update the database and fix any security issues. The comments work everywhere else so I shouldn't have these issues. 


```
| table_schema | table_name              | column_name        | data_type                | is_nullable | column_default                  |
| ------------ | ----------------------- | ------------------ | ------------------------ | ----------- | ------------------------------- |
| public       | calendar_events         | id                 | uuid                     | NO          | uuid_generate_v4()              |
| public       | calendar_events         | title              | text                     | NO          |                                 |
| public       | calendar_events         | description        | text                     | YES         |                                 |
| public       | calendar_events         | start_time         | timestamp with time zone | NO          |                                 |
| public       | calendar_events         | end_time           | timestamp with time zone | NO          |                                 |
| public       | calendar_events         | event_type         | text                     | NO          |                                 |
| public       | calendar_events         | reference_id       | uuid                     | YES         |                                 |
| public       | calendar_events         | created_at         | timestamp with time zone | YES         | now()                           |
| public       | calendar_events         | updated_at         | timestamp with time zone | YES         | now()                           |
| public       | calendar_events         | created_by         | uuid                     | YES         |                                 |
| public       | calendar_events         | last_modified_by   | uuid                     | YES         |                                 |
| public       | calendar_events         | category           | character varying        | YES         |                                 |
| public       | calendar_events         | full_name          | text                     | YES         |                                 |
| public       | development_comments    | id                 | uuid                     | NO          | uuid_generate_v4()              |
| public       | development_comments    | initiative_id      | uuid                     | YES         |                                 |
| public       | development_comments    | user_id            | uuid                     | YES         |                                 |
| public       | development_comments    | content            | text                     | NO          |                                 |
| public       | development_comments    | created_at         | timestamp with time zone | NO          | now()                           |
| public       | development_initiatives | id                 | uuid                     | NO          | uuid_generate_v4()              |
| public       | development_initiatives | title              | text                     | NO          |                                 |
| public       | development_initiatives | description        | text                     | YES         |                                 |
| public       | development_initiatives | status             | USER-DEFINED             | NO          | 'active'::development_status    |
| public       | development_initiatives | priority           | USER-DEFINED             | NO          | 'medium'::development_priority  |
| public       | development_initiatives | category           | USER-DEFINED             | NO          | 'general'::development_category |
| public       | development_initiatives | created_by         | uuid                     | YES         |                                 |
| public       | development_initiatives | created_at         | timestamp with time zone | NO          | now()                           |
| public       | development_initiatives | updated_at         | timestamp with time zone | NO          | now()                           |
| public       | development_initiatives | event_date         | timestamp with time zone | YES         |                                 |
| public       | development_initiatives | location           | text                     | YES         |                                 |
| public       | development_initiatives | max_participants   | integer                  | YES         |                                 |
| public       | development_initiatives | budget             | numeric                  | YES         |                                 |
| public       | event_participants      | event_id           | uuid                     | NO          |                                 |
| public       | event_participants      | user_id            | uuid                     | NO          |                                 |
| public       | event_participants      | status             | USER-DEFINED             | NO          | 'going'::participation_status   |
| public       | event_participants      | created_at         | timestamp with time zone | NO          | now()                           |
| public       | event_participants      | updated_at         | timestamp with time zone | NO          | now()                           |
| public       | garden_areas            | id                 | uuid                     | NO          | uuid_generate_v4()              |
| public       | garden_areas            | name               | text                     | NO          |                                 |
| public       | garden_areas            | description        | text                     | YES         |                                 |
| public       | garden_areas            | status             | text                     | NO          | 'active'::text                  |
| public       | garden_areas            | created_at         | timestamp with time zone | NO          | timezone('utc'::text, now())    |
| public       | garden_areas            | updated_at         | timestamp with time zone | NO          | timezone('utc'::text, now())    |
| public       | garden_areas            | display_order      | integer                  | YES         |                                 |
| public       | garden_comments         | id                 | uuid                     | NO          | uuid_generate_v4()              |
| public       | garden_comments         | task_id            | uuid                     | YES         |                                 |
| public       | garden_comments         | user_id            | uuid                     | YES         |                                 |
| public       | garden_comments         | comment            | text                     | NO          |                                 |
| public       | garden_comments         | created_at         | timestamp with time zone | NO          | now()                           |
| public       | garden_plants           | id                 | uuid                     | NO          | uuid_generate_v4()              |
| public       | garden_plants           | name               | text                     | NO          |                                 |
| public       | garden_plants           | type               | text                     | NO          |                                 |
| public       | garden_plants           | area_id            | uuid                     | YES         |                                 |
| public       | garden_plants           | planting_date      | timestamp with time zone | YES         |                                 |
| public       | garden_plants           | notes              | text                     | YES         |                                 |
| public       | garden_plants           | status             | text                     | NO          | 'alive'::text                   |
| public       | garden_plants           | created_at         | timestamp with time zone | NO          | timezone('utc'::text, now())    |
| public       | garden_plants           | updated_at         | timestamp with time zone | NO          | timezone('utc'::text, now())    |
| public       | garden_tasks            | id                 | uuid                     | NO          | uuid_generate_v4()              |
| public       | garden_tasks            | title              | text                     | NO          |                                 |
| public       | garden_tasks            | description        | text                     | NO          |                                 |
| public       | garden_tasks            | status             | text                     | NO          | 'pending'::text                 |
| public       | garden_tasks            | priority           | text                     | NO          | 'medium'::text                  |
| public       | garden_tasks            | area_id            | uuid                     | YES         |                                 |
| public       | garden_tasks            | assigned_to        | text                     | YES         | 'Everyone '::text               |
| public       | garden_tasks            | due_date           | timestamp with time zone | YES         |                                 |
| public       | garden_tasks            | created_at         | timestamp with time zone | NO          | timezone('utc'::text, now())    |
| public       | garden_tasks            | updated_at         | timestamp with time zone | NO          | timezone('utc'::text, now())    |
| public       | garden_tasks            | scheduled_time     | time without time zone   | YES         |                                 |
| public       | garden_tasks            | duration           | interval                 | YES         |                                 |
| public       | houses                  | id                 | uuid                     | NO          | gen_random_uuid()               |
| public       | houses                  | name               | text                     | NO          |                                 |
| public       | houses                  | created_at         | timestamp with time zone | YES         | now()                           |
| public       | houses                  | updated_at         | timestamp with time zone | YES         | now()                           |
| public       | maintenance_comments    | id                 | uuid                     | NO          | gen_random_uuid()               |
| public       | maintenance_comments    | request_id         | uuid                     | YES         |                                 |
| public       | maintenance_comments    | user_id            | uuid                     | YES         |                                 |
| public       | maintenance_comments    | comment            | text                     | NO          |                                 |
| public       | maintenance_comments    | created_at         | timestamp with time zone | YES         | now()                           |
| public       | maintenance_requests    | id                 | uuid                     | NO          | gen_random_uuid()               |
| public       | maintenance_requests    | title              | text                     | NO          |                                 |
| public       | maintenance_requests    | description        | text                     | NO          |                                 |
| public       | maintenance_requests    | status             | text                     | NO          | 'pending'::text                 |
| public       | maintenance_requests    | priority           | text                     | NO          | 'medium'::text                  |
| public       | maintenance_requests    | house_id           | uuid                     | YES         |                                 |
| public       | maintenance_requests    | reported_by        | uuid                     | YES         |                                 |
| public       | maintenance_requests    | created_at         | timestamp with time zone | YES         | now()                           |
| public       | maintenance_requests    | updated_at         | timestamp with time zone | YES         | now()                           |
| public       | maintenance_visits      | id                 | uuid                     | NO          | gen_random_uuid()               |
| public       | maintenance_visits      | request_id         | uuid                     | YES         |                                 |
| public       | maintenance_visits      | scheduled_date     | timestamp with time zone | NO          |                                 |
| public       | maintenance_visits      | estimated_duration | text                     | YES         |                                 |
| public       | maintenance_visits      | access_person_id   | uuid                     | YES         |                                 |
| public       | maintenance_visits      | notes              | text                     | YES         |                                 |
| public       | maintenance_visits      | completed_at       | timestamp with time zone | YES         |                                 |
| public       | maintenance_visits      | created_at         | timestamp with time zone | YES         | now()                           |
| public       | maintenance_visits      | updated_at         | timestamp with time zone | YES         | now()                           |
| public       | partner_organisations   | id                 | uuid                     | NO          | uuid_generate_v4()              |
| public       | partner_organisations   | name               | text                     | NO          |                                 |
| public       | partner_organisations   | type               | text                     | NO          |                                 |
| public       | partner_organisations   | contact_email      | text                     | YES         |                                 |
| public       | partner_organisations   | website            | text                     | YES         |                                 |
| public       | partner_organisations   | notes              | text                     | YES         |                                 |
| public       | partner_organisations   | last_contact_date  | timestamp with time zone | YES         |                                 |
| public       | partner_organisations   | next_meeting_date  | timestamp with time zone | YES         |                                 |
| public       | partner_organisations   | created_at         | timestamp with time zone | NO          | now()                           |
| public       | partner_organisations   | updated_at         | timestamp with time zone | NO          | now()                           |
| public       | profiles                | id                 | uuid                     | NO          |                                 |
| public       | profiles                | email              | text                     | NO          |                                 |
| public       | profiles                | full_name          | text                     | YES         |                                 |
| public       | profiles                | house_number       | text                     | YES         |                                 |
| public       | profiles                | created_at         | timestamp with time zone | YES         | now()                           |
| public       | profiles                | updated_at         | timestamp with time zone | YES         | now()                           |
| public       | task_comments           | id                 | uuid                     | NO          | gen_random_uuid()               |
| public       | task_comments           | task_id            | uuid                     | YES         |                                 |
| public       | task_comments           | content            | text                     | NO          |                                 |
| public       | task_comments           | created_at         | timestamp with time zone | NO          | timezone('utc'::text, now())    |
| public       | task_comments           | updated_at         | timestamp with time zone | NO          | timezone('utc'::text, now())    |
| public       | task_comments           | created_by         | uuid                     | YES         |                                 |
| public       | tasks                   | id                 | uuid                     | NO          | gen_random_uuid()               |
| public       | tasks                   | title              | text                     | NO          |                                 |
| public       | tasks                   | description        | text                     | YES         |                                 |
| public       | tasks                   | status             | text                     | NO          | 'todo'::text                    |
| public       | tasks                   | task_type          | text                     | NO          | 'general'::text                 |
| public       | tasks                   | created_at         | timestamp with time zone | NO          | timezone('utc'::text, now())    |
| public       | tasks                   | updated_at         | timestamp with time zone | NO          | timezone('utc'::text, now())    |
| public       | tasks                   | created_by         | uuid                     | YES         |                                 |
| public       | tasks                   | assigned_to        | uuid                     | YES         |                                 |
| public       | tasks                   | priority           | text                     | YES         | 'medium'::text                  |
| public       | tasks                   | category           | text                     | YES         | 'general'::text                 |
| public       | tasks                   | due_date           | timestamp with time zone | YES         |                                 |


| constraint_name                          | source_table            | source_column    | target_table            | target_column |
| ---------------------------------------- | ----------------------- | ---------------- | ----------------------- | ------------- |
| calendar_events_created_by_fkey          | calendar_events         | created_by       | profiles                | id            |
| calendar_events_last_modified_by_fkey    | calendar_events         | last_modified_by | profiles                | id            |
| development_comments_initiative_id_fkey  | development_comments    | initiative_id    | development_initiatives | id            |
| development_comments_user_id_fkey        | development_comments    | user_id          | profiles                | id            |
| development_initiatives_created_by_fkey  | development_initiatives | created_by       | profiles                | id            |
| event_participants_event_id_fkey         | event_participants      | event_id         | development_initiatives | id            |
| event_participants_user_id_fkey          | event_participants      | user_id          | profiles                | id            |
| garden_comments_task_id_fkey             | garden_comments         | task_id          | garden_tasks            | id            |
| garden_comments_user_id_fkey             | garden_comments         | user_id          | profiles                | id            |
| garden_plants_area_id_fkey               | garden_plants           | area_id          | garden_areas            | id            |
| garden_tasks_area_id_fkey                | garden_tasks            | area_id          | garden_areas            | id            |
| maintenance_comments_request_id_fkey     | maintenance_comments    | request_id       | maintenance_requests    | id            |
| maintenance_comments_user_id_fkey        | maintenance_comments    | user_id          | profiles                | id            |
| maintenance_requests_house_id_fkey       | maintenance_requests    | house_id         | houses                  | id            |
| maintenance_requests_reported_by_fkey    | maintenance_requests    | reported_by      | profiles                | id            |
| maintenance_visits_access_person_id_fkey | maintenance_visits      | access_person_id | profiles                | id            |
| maintenance_visits_request_id_fkey       | maintenance_visits      | request_id       | maintenance_requests    | id            |
| task_comments_created_by_fkey            | task_comments           | created_by       | profiles                | id            |
| task_comments_task_id_fkey               | task_comments           | task_id          | tasks                   | id            |
| tasks_assigned_to_fkey                   | tasks                   | assigned_to      | profiles                | id            |
| tasks_created_by_fkey                    | tasks                   | created_by       | profiles                | id            |


```
Here is code that works well, from tasks. Please use this as a guide and for context:

```
// Code files extracted from brighton-rock-members/app/(default)/tasks
// Generated on 2024-12-01 03:43:49
// Included extensions: .tsx, .ts, .js, .jsx, .json, .sql
// Excluded files: package-lock.json, yarn.lock, pnpm-lock.yaml, .DS_Store


================================================================================
// File: new-task-modal.tsx
================================================================================

// app/(default)/tasks/new-task-modal.tsx

'use client';

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { Plus } from 'lucide-react';

// Define the Profile type based on your profiles table
interface Profile {
  id: string;
  email: string;
  full_name: string | null;
}

export default function NewTaskModal() {
  const router = useRouter();
  const [isOpen, setIsOpen] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const supabase = createClientComponentClient();

  // **State Variables for Controlled Inputs**
  const [title, setTitle] = useState('');
  const [description, setDescription] = useState('');
  const [taskType, setTaskType] = useState('general'); // Renamed
  const [priority, setPriority] = useState('medium');
  const [assignedTo, setAssignedTo] = useState<string | null>(null);

  // **State for User Profiles**
  const [profiles, setProfiles] = useState<Profile[]>([]);
  const [isFetchingProfiles, setIsFetchingProfiles] = useState(false);

  // **Function to Fetch Profiles**
  const fetchProfiles = async () => {
    setIsFetchingProfiles(true);
    setError(null);
    try {
      const { data, error } = await supabase
        .from('profiles')
        .select('id, email, full_name')
        .order('full_name', { ascending: true });

      if (error) {
        console.error('Error fetching profiles:', error);
        setError('Failed to fetch user profiles.');
        return;
      }

      setProfiles(data || []);
    } catch (err) {
      console.error('Unexpected error fetching profiles:', err);
      setError('An unexpected error occurred while fetching profiles.');
    } finally {
      setIsFetchingProfiles(false);
    }
  };

  // In new-task-modal.tsx - update handleSubmit

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    setIsSubmitting(true);
    setError(null);

    try {
      // Get Current User
      const {
        data: { user },
        error: userError,
      } = await supabase.auth.getUser();
      if (userError || !user) throw new Error('User not authenticated');

      // Insert Task into Supabase
      const { data: newTask, error: insertError } = await supabase
        .from('tasks')
        .insert({
          title: title.trim(),
          description: description.trim() || null,
          task_type: taskType,
          status: 'pending',
          priority,
          created_by: user.id,
          assigned_to: assignedTo || null,
        })
        .select(
          `
        *,
        created_by_user:profiles!tasks_created_by_fkey(
          email,
          full_name
        ),
        assigned_to_user:profiles!tasks_assigned_to_fkey(
          email,
          full_name
        )
      `
        )
        .single();

      if (insertError) throw insertError;

      // Reset Form Fields
      setTitle('');
      setDescription('');
      setTaskType('general');
      setPriority('medium');
      setAssignedTo(null);

      // Refresh Page and Close Modal
      router.refresh();
      setIsOpen(false);
    } catch (error) {
      console.error('Error creating task:', error);
      setError(
        error instanceof Error ? error.message : 'Failed to create task'
      );
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <>
      {/* **Trigger Button to Open Modal and Fetch Profiles** */}
      <Button
        onClick={() => {
          setIsOpen(true);
          fetchProfiles(); // Fetch profiles when modal opens
        }}
        variant="default"
      >
        <Plus className="h-4 w-4 mr-2" />
        Add Task
      </Button>

      {/* **Modal Dialog** */}
      <Dialog open={isOpen} onOpenChange={setIsOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>New Task</DialogTitle>
          </DialogHeader>

          {/* **Error Message** */}
          {error && (
            <div className="bg-red-50 dark:bg-red-900/50 text-red-600 dark:text-red-200 p-3 rounded-md text-sm">
              {error}
            </div>
          )}

          {/* **Task Creation Form** */}
          <form onSubmit={handleSubmit} className="space-y-4">
            {/* **Title Field** */}
            <div>
              <Label htmlFor="title">Title</Label>
              <Input
                id="title"
                name="title"
                required
                placeholder="Enter task title"
                value={title}
                onChange={(e) => setTitle(e.target.value)}
              />
            </div>

            {/* **Description Field** */}
            <div>
              <Label htmlFor="description">Description</Label>
              <Textarea
                id="description"
                name="description"
                required
                placeholder="Enter task description"
                className="min-h-[100px]"
                value={description}
                onChange={(e) => setDescription(e.target.value)}
              />
            </div>

            {/* **Task Type Field** */}
            <div>
              <Label htmlFor="task_type">Task Type</Label>
              <select
                id="task_type" // Updated
                name="task_type" // Updated
                required
                value={taskType} // Updated
                onChange={(e) => setTaskType(e.target.value)}
                className="w-full h-10 rounded-md border border-slate-200 dark:border-slate-700 bg-white dark:bg-slate-900 px-3 py-2"
              >
                <option value="general">General Task</option>
                <option value="minuted">Minuted Action</option>
              </select>
            </div>

            {/* **Priority Field** */}
            <div>
              <Label htmlFor="priority">Priority</Label>
              <select
                id="priority"
                name="priority"
                required
                value={priority}
                onChange={(e) => setPriority(e.target.value)}
                className="w-full h-10 rounded-md border border-slate-200 dark:border-slate-700 bg-white dark:bg-slate-900 px-3 py-2"
              >
                <option value="low">Low</option>
                <option value="medium">Medium</option>
                <option value="high">High</option>
                <option value="urgent">Urgent</option>
              </select>
            </div>

            {/* **Assign To Field** */}
            <div>
              <Label htmlFor="assigned_to">Assign To</Label>
              <select
                id="assigned_to"
                name="assigned_to"
                value={assignedTo || ''}
                onChange={(e) =>
                  setAssignedTo(e.target.value === '' ? null : e.target.value)
                }
                className="w-full h-10 rounded-md border border-slate-200 dark:border-slate-700 bg-white dark:bg-slate-900 px-3 py-2"
                disabled={isFetchingProfiles}
              >
                <option value="">Unassigned</option>
                {isFetchingProfiles ? (
                  <option disabled>Loading...</option>
                ) : (
                  profiles.map((profile) => (
                    <option key={profile.id} value={profile.id}>
                      {profile.full_name
                        ? `${profile.full_name} (${profile.email})`
                        : profile.email}
                    </option>
                  ))
                )}
              </select>
            </div>

            {/* **Form Actions** */}
            <div className="flex justify-end space-x-2">
              <Button
                type="button"
                variant="outline"
                onClick={() => setIsOpen(false)}
                disabled={isSubmitting}
              >
                Cancel
              </Button>
              <Button type="submit" disabled={isSubmitting}>
                {isSubmitting ? 'Creating...' : 'Create Task'}
              </Button>
            </div>
          </form>
        </DialogContent>
      </Dialog>
    </>
  );
}



================================================================================
// File: page.tsx
================================================================================

// app/(default)/tasks/page.tsx

import { Metadata } from 'next';
import TaskList from './task-list';
import TaskHeader from './task-header';
import { TaskWithDetails } from '@/types/tasks';
import supabaseAdmin from '@/lib/supabaseAdmin';

export const metadata: Metadata = {
  title: 'Tasks - Co-op Management',
  description: 'View and manage co-op tasks',
};

// Force dynamic rendering to ensure fresh data
export const dynamic = 'force-dynamic';
export const revalidate = 0;

// In page.tsx - update getTasks()

async function getTasks() {
  try {
    const { data: tasks, error } = await supabaseAdmin
      .from('tasks')
      .select(`
        *,
        created_by_user:profiles!tasks_created_by_fkey(
          email,
          full_name
        ),
        assigned_to_user:profiles!tasks_assigned_to_fkey(
          email,
          full_name
        ),
        comments:task_comments(
          id,
          content,
          created_at,
          created_by,
          user:profiles!task_comments_created_by_fkey(
            email,
            full_name
          )
        )
      `)
      .order('created_at', { ascending: false });

    if (error) {
      console.error('Error fetching tasks:', error);
      return [];
    }

    return tasks;
  } catch (err) {
    console.error('Error fetching tasks:', err);
    return [];
  }
}


export default async function TasksPage() {
  const tasks = await getTasks();

  return (
    <div className="px-4 sm:px-6 lg:px-8 py-8 w-full max-w-9xl mx-auto">
      <TaskHeader />
      <TaskList tasks={tasks} />
    </div>
  );
}



================================================================================
// File: task-header.tsx
================================================================================

// app/(default)/tasks/task-header.tsx

'use client';

import NewTaskModal from './new-task-modal';

export default function TaskHeader() {
  return (
    <div className="sm:flex sm:justify-between sm:items-center mb-8">
      {/* Left: Title */}
      <div className="mb-4 sm:mb-0">
        <h1 className="text-2xl md:text-3xl text-slate-800 dark:text-slate-100 font-bold">
          Tasks üìã
        </h1>
      </div>

      {/* Right: Actions */}
      <div className="grid grid-flow-col sm:auto-cols-max justify-start sm:justify-end gap-2">
        <NewTaskModal />
      </div>
    </div>
  );
}



================================================================================
// File: task-list.tsx
================================================================================

// app/(default)/tasks/task-list.tsx

'use client';

import { useState } from 'react';
import Link from 'next/link';
import { format } from 'date-fns';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table';
import {
  TaskWithDetails,
  TaskPriority,
  TaskStatus,
  TaskCategory,
} from '@/types/tasks';
import { Button } from '@/components/ui/button';

interface TaskListProps {
  tasks: TaskWithDetails[];
}

const ITEMS_PER_PAGE = 10;

export default function TaskList({ tasks }: TaskListProps) {
  const [statusFilter, setStatusFilter] = useState<'all' | TaskStatus>('all');
  const [taskTypeFilter, setTaskTypeFilter] = useState<'all' | TaskCategory>(
    'all'
  );
  const [priorityFilter, setPriorityFilter] = useState<'all' | TaskPriority>(
    'all'
  );
  const [currentPage, setCurrentPage] = useState(1);

  // Filter tasks based on selected filters
  const filteredTasks = tasks.filter((task) => {
    if (statusFilter !== 'all' && task.status !== statusFilter) return false;
    if (taskTypeFilter !== 'all' && task.task_type !== taskTypeFilter)
      return false;
    if (priorityFilter !== 'all' && task.priority !== priorityFilter)
      return false;
    return true;
  });

  // Calculate pagination
  const totalItems = filteredTasks.length;
  const totalPages = Math.ceil(totalItems / ITEMS_PER_PAGE);
  const startIndex = (currentPage - 1) * ITEMS_PER_PAGE;
  const endIndex = Math.min(startIndex + ITEMS_PER_PAGE, totalItems);
  const paginatedTasks = filteredTasks.slice(startIndex, endIndex);

  // Handle page changes
  const goToNextPage = () => {
    if (currentPage < totalPages) {
      setCurrentPage(currentPage + 1);
    }
  };

  const goToPreviousPage = () => {
    if (currentPage > 1) {
      setCurrentPage(currentPage - 1);
    }
  };

  // Reset pagination when filters change
  const handleFilterChange = (
    filterType: 'status' | 'type' | 'priority',
    value: string
  ) => {
    setCurrentPage(1); // Reset to first page
    switch (filterType) {
      case 'status':
        setStatusFilter(value as 'all' | TaskStatus);
        break;
      case 'type':
        setTaskTypeFilter(value as 'all' | TaskCategory);
        break;
      case 'priority':
        setPriorityFilter(value as 'all' | TaskPriority);
        break;
    }
  };

  const getStatusColor = (status: TaskStatus) => {
    const colors = {
      pending:
        'bg-yellow-100 dark:bg-yellow-900/50 text-yellow-800 dark:text-yellow-200',
      in_progress:
        'bg-blue-100 dark:bg-blue-900/50 text-blue-800 dark:text-blue-200',
      completed:
        'bg-green-100 dark:bg-green-900/50 text-green-800 dark:text-green-200',
      cancelled:
        'bg-gray-100 dark:bg-gray-900/50 text-gray-800 dark:text-gray-200',
      todo: 'bg-gray-100 dark:bg-gray-900/50 text-gray-800 dark:text-gray-200',
    };
    return colors[status] || colors.pending;
  };

  const getPriorityColor = (priority: TaskPriority) => {
    const colors = {
      low: 'bg-slate-100 text-slate-600 dark:bg-slate-500/20 dark:text-slate-400',
      medium:
        'bg-blue-100 text-blue-600 dark:bg-blue-500/20 dark:text-blue-400',
      high: 'bg-orange-100 text-orange-600 dark:bg-orange-500/20 dark:text-orange-400',
      urgent: 'bg-red-100 text-red-600 dark:bg-red-500/20 dark:text-red-400',
    };
    return colors[priority] || colors.medium;
  };

  return (
    <div>
      {/* Filters */}
      <div className="mb-6 space-y-4">
        {/* Status Filters */}
        <div className="flex flex-wrap gap-2">
          <Button
            onClick={() => handleFilterChange('status', 'all')}
            variant={statusFilter === 'all' ? 'default' : 'outline'}
            size="sm"
          >
            All Status
          </Button>
          {['todo', 'in_progress', 'completed', 'cancelled', 'pending'].map(
            (status) => (
              <Button
                key={status}
                onClick={() => handleFilterChange('status', status)}
                variant={statusFilter === status ? 'default' : 'outline'}
                size="sm"
              >
                {status.charAt(0).toUpperCase() +
                  status.slice(1).replace('_', ' ')}
              </Button>
            )
          )}
        </div>

        {/* Type Filters */}
        <div className="flex flex-wrap gap-2">
          <Button
            onClick={() => handleFilterChange('type', 'all')}
            variant={taskTypeFilter === 'all' ? 'default' : 'outline'}
            size="sm"
          >
            All Types
          </Button>
          <Button
            onClick={() => handleFilterChange('type', 'general')}
            variant={taskTypeFilter === 'general' ? 'default' : 'outline'}
            size="sm"
          >
            General Tasks
          </Button>
          <Button
            onClick={() => handleFilterChange('type', 'minuted')}
            variant={taskTypeFilter === 'minuted' ? 'default' : 'outline'}
            size="sm"
          >
            Minuted Actions
          </Button>
        </div>

        {/* Priority Filters */}
        <div className="flex flex-wrap gap-2">
          <Button
            onClick={() => handleFilterChange('priority', 'all')}
            variant={priorityFilter === 'all' ? 'default' : 'outline'}
            size="sm"
          >
            All Priorities
          </Button>
          {['low', 'medium', 'high', 'urgent'].map((priority) => (
            <Button
              key={priority}
              onClick={() => handleFilterChange('priority', priority)}
              variant={priorityFilter === priority ? 'default' : 'outline'}
              size="sm"
            >
              {priority.charAt(0).toUpperCase() + priority.slice(1)}
            </Button>
          ))}
        </div>
      </div>

      {/* Tasks Table */}
      <div className="bg-white dark:bg-slate-800 shadow-lg rounded-sm border border-slate-200 dark:border-slate-700">
        <div className="overflow-x-auto px-8">
          <Table className="table-fixed w-full py-2">
            <TableHeader>
              <TableRow>
                <TableHead className="w-1/4">Title</TableHead>
                <TableHead className="w-1/6">Type</TableHead>
                <TableHead className="w-1/6">Status</TableHead>
                <TableHead className="w-1/6">Priority</TableHead>
                <TableHead className="w-1/6">Assigned To</TableHead>
                <TableHead className="w-1/6">Created</TableHead>
                <TableHead className="w-1/12">Comments</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {paginatedTasks.map((task) => (
                <TableRow key={task.id}>
                  <TableCell className="w-1/4">
                    <Link
                      href={`/tasks/${task.id}`}
                      className="font-medium text-green-600 dark:text-green-400 hover:underline"
                    >
                      {task.title}
                    </Link>
                    {task.description && (
                      <div className="text-sm text-slate-500 dark:text-slate-400 truncate">
                        {task.description}
                      </div>
                    )}
                  </TableCell>
                  <TableCell className="w-1/6">
                    {task.task_type === 'minuted'
                      ? 'Minuted Action'
                      : 'General Task'}
                  </TableCell>
                  <TableCell className="w-1/6">
                    <div
                      className={`inline-flex font-medium rounded-full text-center px-2.5 py-0.5 ${getStatusColor(
                        task.status
                      )}`}
                    >
                      {task.status.charAt(0).toUpperCase() +
                        task.status.slice(1).replace('_', ' ')}
                    </div>
                  </TableCell>
                  <TableCell className="w-1/6">
                    {task.priority && (
                      <div
                        className={`inline-flex font-medium rounded-full text-center px-2.5 py-0.5 ${getPriorityColor(
                          task.priority
                        )}`}
                      >
                        {task.priority.charAt(0).toUpperCase() +
                          task.priority.slice(1)}
                      </div>
                    )}
                  </TableCell>
                  <TableCell className="w-1/6">
                    {task.assigned_to_user?.full_name ||
                      task.assigned_to_user?.email ||
                      '-'}
                  </TableCell>
                  <TableCell className="w-1/6">
                    {format(new Date(task.created_at), 'MMM d, yyyy')}
                  </TableCell>
                  <TableCell className="w-1/12">
                    {task.comments.length}
                  </TableCell>
                </TableRow>
              ))}
              {paginatedTasks.length === 0 && (
                <TableRow>
                  <TableCell colSpan={7} className="text-center py-8">
                    <div className="text-slate-500 dark:text-slate-400">
                      No tasks found
                    </div>
                  </TableCell>
                </TableRow>
              )}
            </TableBody>
          </Table>
        </div>

        {/* Pagination */}
        <div className="px-8 py-4 border-t border-slate-200 dark:border-slate-700">
          <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between">
            <nav
              className="mb-4 sm:mb-0 sm:order-1"
              role="navigation"
              aria-label="Navigation"
            >
              <ul className="flex justify-center">
                <li className="ml-3 first:ml-0">
                  <button
                    onClick={goToPreviousPage}
                    disabled={currentPage === 1}
                    className={`btn ${
                      currentPage === 1
                        ? 'bg-white dark:bg-gray-800 border-gray-200 dark:border-gray-700/60 text-gray-300 dark:text-gray-600'
                        : 'bg-white dark:bg-gray-800 border-gray-200 dark:border-gray-700/60 hover:border-gray-300 dark:hover:border-gray-600 text-gray-800 dark:text-gray-300'
                    }`}
                  >
                    &lt;- Previous
                  </button>
                </li>
                <li className="ml-3 first:ml-0">
                  <button
                    onClick={goToNextPage}
                    disabled={currentPage >= totalPages}
                    className={`btn ${
                      currentPage >= totalPages
                        ? 'bg-white dark:bg-gray-800 border-gray-200 dark:border-gray-700/60 text-gray-300 dark:text-gray-600'
                        : 'bg-white dark:bg-gray-800 border-gray-200 dark:border-gray-700/60 hover:border-gray-300 dark:hover:border-gray-600 text-gray-800 dark:text-gray-300'
                    }`}
                  >
                    Next -&gt;
                  </button>
                </li>
              </ul>
            </nav>
            <div className="text-sm text-gray-500 text-center sm:text-left">
              Showing{' '}
              <span className="font-medium text-gray-600 dark:text-gray-300">
                {startIndex + 1}
              </span>{' '}
              to{' '}
              <span className="font-medium text-gray-600 dark:text-gray-300">
                {endIndex}
              </span>{' '}
              of{' '}
              <span className="font-medium text-gray-600 dark:text-gray-300">
                {totalItems}
              </span>{' '}
              results
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}



================================================================================
// File: [id]/comment-section.tsx
================================================================================

// File: app/(default)/tasks/[id]/comment-section.tsx

'use client';

import { useState, useEffect } from 'react';
import { format } from 'date-fns';
import { useRouter } from 'next/navigation';
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs';
import { TaskWithDetails, TaskComment } from '@/types/tasks';
import { Button } from '@/components/ui/button';

interface CommentSectionProps {
  task: TaskWithDetails;
}

export default function CommentSection({ task }: CommentSectionProps) {
  const router = useRouter();
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [editingComment, setEditingComment] = useState<string | null>(null);
  const [currentUserId, setCurrentUserId] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);
  const supabase = createClientComponentClient();

  useEffect(() => {
    async function getCurrentUser() {
      const {
        data: { user },
        error: authError,
      } = await supabase.auth.getUser();
      if (authError) {
        console.error('Error fetching user:', authError);
        return;
      }
      setCurrentUserId(user?.id || null);
    }
    getCurrentUser();
  }, [supabase]);

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    if (isSubmitting) return;

    setIsSubmitting(true);
    setError(null);
    const form = e.currentTarget;
    const formData = new FormData(form);
    const commentText = formData.get('content') as string;

    try {
      const {
        data: { user },
      } = await supabase.auth.getUser();
      if (!user) {
        setError('You must be logged in to comment');
        return;
      }

      // Add the comment
      const { error: insertError } = await supabase
        .from('task_comments')
        .insert({
          task_id: task.id,
          created_by: user.id,
          content: commentText,
        });

      if (insertError) {
        console.error('Error adding comment:', insertError);
        setError('Failed to add comment. Please try again.');
        return;
      }

      form.reset();
      router.refresh();
    } catch (err) {
      console.error('Error adding comment:', err);
      setError('Failed to add comment. Please try again.');
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleCommentUpdate = async (
    commentId: string,
    e: React.FormEvent<HTMLFormElement>
  ) => {
    e.preventDefault();
    if (isSubmitting) return;

    setIsSubmitting(true);
    setError(null);
    const form = e.currentTarget;
    const formData = new FormData(form);
    const commentText = formData.get('content') as string;

    try {
      // Update the comment
      const { error: updateError } = await supabase
        .from('task_comments')
        .update({ content: commentText })
        .eq('id', commentId)
        .eq('created_by', currentUserId);

      if (updateError) {
        console.error('Error updating comment:', updateError);
        setError('Failed to update comment. Please try again.');
        return;
      }

      setEditingComment(null);
      router.refresh();
    } catch (err) {
      console.error('Error updating comment:', err);
      setError('Failed to update comment. Please try again.');
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleCommentDelete = async (commentId: string) => {
    if (!window.confirm('Are you sure you want to delete this comment?')) {
      return;
    }

    setError(null);
    try {
      const { error: deleteError } = await supabase
        .from('task_comments')
        .delete()
        .eq('id', commentId)
        .eq('created_by', currentUserId);

      if (deleteError) {
        console.error('Error deleting comment:', deleteError);
        setError('Failed to delete comment. Please try again.');
        return;
      }

      router.refresh();
    } catch (err) {
      console.error('Error deleting comment:', err);
      setError('Failed to delete comment. Please try again.');
    }
  };

  return (
    <div className="bg-white dark:bg-slate-800 border border-slate-200 dark:border-slate-700 rounded-lg">
      <div className="px-5 py-4">
        <h2 className="font-semibold text-slate-800 dark:text-slate-100 mb-4">
          Comments
        </h2>

        {/* Comment List */}
        <div className="space-y-4 mb-6">
          {error && (
            <div className="rounded-lg bg-red-50 dark:bg-red-900/50 p-4 mb-4">
              <p className="text-sm text-red-700 dark:text-red-200">{error}</p>
            </div>
          )}

          {task.comments.map((comment: TaskComment) => (
            <div
              key={comment.id}
              className="flex space-x-3 p-3 bg-slate-50 dark:bg-slate-900/50 rounded-lg"
            >
              <div className="flex-shrink-0">
                <div className="w-8 h-8 rounded-full bg-coop-600 flex items-center justify-center">
                  <span className="text-sm font-medium text-white">
                    {comment.user?.full_name?.charAt(0).toUpperCase() ||
                      comment.user?.email?.charAt(0).toUpperCase() ||
                      '?'}
                  </span>
                </div>
              </div>
              <div className="flex-grow">
                {editingComment === comment.id ? (
                  <form
                    onSubmit={(e) => handleCommentUpdate(comment.id, e)}
                    className="space-y-2"
                  >
                    <textarea
                      name="content"
                      defaultValue={comment.content}
                      required
                      rows={2}
                      className="block w-full rounded-lg border border-slate-300 dark:border-slate-600 bg-white dark:bg-slate-700 px-3 py-2 text-sm text-slate-900 dark:text-slate-100"
                    />
                    <div className="flex justify-end space-x-2">
                      <Button
                        type="button"
                        variant="ghost"
                        onClick={() => setEditingComment(null)}
                      >
                        Cancel
                      </Button>
                      <Button type="submit" disabled={isSubmitting}>
                        Save
                      </Button>
                    </div>
                  </form>
                ) : (
                  <>
                    <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-1">
                      <div className="text-sm font-medium text-slate-800 dark:text-slate-100">
                        {comment.user?.full_name ||
                          comment.user?.email ||
                          'Unknown User'}
                      </div>
                      <div className="text-xs text-slate-500 dark:text-slate-400">
                        {format(
                          new Date(comment.created_at),
                          'MMM d, yyyy h:mm a'
                        )}
                      </div>
                    </div>
                    <div className="text-sm text-slate-600 dark:text-slate-300 whitespace-pre-wrap">
                      {comment.content}
                    </div>
                    {currentUserId === comment.created_by && (
                      <div className="mt-2 flex space-x-2">
                        <button
                          onClick={() => setEditingComment(comment.id)}
                          className="text-sm font-medium text-coop-600 hover:text-coop-700 dark:text-coop-400 dark:hover:text-coop-300"
                        >
                          Edit
                        </button>
                        <button
                          onClick={() => handleCommentDelete(comment.id)}
                          className="text-sm font-medium text-red-600 hover:text-red-700 dark:text-red-400 dark:hover:text-red-300"
                        >
                          Delete
                        </button>
                      </div>
                    )}
                  </>
                )}
              </div>
            </div>
          ))}
          {task.comments.length === 0 && (
            <div className="text-sm text-slate-500 dark:text-slate-400 text-center py-4">
              No comments yet
            </div>
          )}
        </div>

        {/* Comment Form */}
        <form onSubmit={handleSubmit} className="space-y-4">
          <div>
            <label htmlFor="content" className="sr-only">
              Add a comment
            </label>
            <textarea
              name="content"
              id="content"
              rows={3}
              required
              className="mt-1 block w-full rounded-lg border border-slate-300 dark:border-slate-600 bg-white dark:bg-slate-700 px-3 py-2 text-sm text-slate-900 dark:text-slate-100 placeholder-slate-400 focus:border-coop-500 focus:outline-none focus:ring-1 focus:ring-coop-500"
              placeholder="Add a comment..."
            />
          </div>

          <div className="flex justify-end">
            <Button type="submit" disabled={isSubmitting}>
              {isSubmitting ? 'Adding...' : 'Add Comment'}
            </Button>
          </div>
        </form>
      </div>
    </div>
  );
}



================================================================================
// File: [id]/page.tsx
================================================================================

// app/(default)/tasks/[id]/page.tsx

import { Metadata } from 'next';
import { notFound } from 'next/navigation';
import supabaseAdmin from '@/lib/supabaseAdmin';
import { TaskWithDetails } from '@/types/tasks';
import TaskHeader from './task-header';
import TaskDetails from './task-details';
import CommentSection from './comment-section';

export const metadata: Metadata = {
  title: 'Task Details - Co-op Management',
  description: 'View and manage task details',
};

// Force dynamic rendering to ensure fresh data
export const dynamic = 'force-dynamic';
export const revalidate = 0;

async function getTask(id: string) {
  try {
    const { data: task, error } = await supabaseAdmin
      .from('tasks')
      .select(
        `
        *,
        created_by_user:profiles!tasks_created_by_fkey(email, full_name),
        assigned_to_user:profiles!tasks_assigned_to_fkey(email, full_name),
        comments:task_comments(
          *,
          user:profiles!task_comments_created_by_fkey(
            email,
            full_name
          )
        )
      `
      )
      .eq('id', id)
      .order('created_at', { foreignTable: 'task_comments', ascending: true })
      .single();

    if (error) {
      if (error.code === 'PGRST116') {
        return null;
      }
      throw error;
    }

    return task as TaskWithDetails;
  } catch (err) {
    console.error('Error fetching task:', err);
    return null;
  }
}

interface TaskDetailPageProps {
  params: {
    id: string;
  };
}

export default async function TaskDetailPage({ params }: TaskDetailPageProps) {
  const task = await getTask(params.id);

  if (!task) {
    notFound();
  }

  return (
    <div className="px-4 sm:px-6 lg:px-8 py-8 w-full max-w-9xl mx-auto">
      <TaskHeader task={task} />

      <div className="grid grid-cols-1 xl:grid-cols-3 gap-6 mt-6">
        {/* Left column - Task details and comments */}
        <div className="xl:col-span-2 space-y-6">
          <TaskDetails task={task} />
          <CommentSection task={task} />
        </div>
      </div>
    </div>
  );
}



================================================================================
// File: [id]/task-actions.tsx
================================================================================

'use client';

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs';
import {
  TaskWithDetails,
  TaskStatus,
  TaskPriority,
  TaskCategory,
} from '@/types/tasks';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { Edit, Trash2 } from 'lucide-react';

// Define the Profile type based on your profiles table
interface Profile {
  id: string;
  email: string;
  full_name: string | null;
}

interface TaskActionsProps {
  task: TaskWithDetails;
}

export default function TaskActions({ task }: TaskActionsProps) {
  const router = useRouter();
  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);
  const [isDeleting, setIsDeleting] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const supabase = createClientComponentClient();

  // **State Variables for Controlled Inputs**
  const [title, setTitle] = useState(task.title);
  const [description, setDescription] = useState(task.description || '');
  const [taskType, setTaskType] = useState<TaskCategory>(task.task_type); // Renamed
  const [priority, setPriority] = useState<TaskPriority>(task.priority);
  const [status, setStatus] = useState<TaskStatus>(task.status);
  const [assignedTo, setAssignedTo] = useState<string | null>(task.assigned_to);

  // State for User Profiles
  const [profiles, setProfiles] = useState<Profile[]>([]);
  const [isFetchingProfiles, setIsFetchingProfiles] = useState(false);

  // Function to Fetch Profiles
  const fetchProfiles = async () => {
    setIsFetchingProfiles(true);
    setError(null);
    try {
      const { data, error } = await supabase
        .from('profiles')
        .select('id, email, full_name')
        .order('full_name', { ascending: true });

      if (error) {
        console.error('Error fetching profiles:', error);
        setError('Failed to fetch user profiles.');
        return;
      }

      setProfiles(data || []);
    } catch (err) {
      console.error('Unexpected error fetching profiles:', err);
      setError('An unexpected error occurred while fetching profiles.');
    } finally {
      setIsFetchingProfiles(false);
    }
  };

  // In task-actions.tsx - update handleEdit

  const handleEdit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    setIsSubmitting(true);
    setError(null);

    try {
      // Get Current User
      const {
        data: { user },
        error: userError,
      } = await supabase.auth.getUser();
      if (userError || !user) throw new Error('User not authenticated');

      // Update Task in Supabase
      const { data: updatedTask, error: updateError } = await supabase
        .from('tasks')
        .update({
          title: title.trim(),
          description: description.trim() || null,
          task_type: taskType,
          status,
          priority,
          assigned_to: assignedTo || null,
        })
        .eq('id', task.id)
        .select(
          `
        *,
        created_by_user:profiles!tasks_created_by_fkey(
          email,
          full_name
        ),
        assigned_to_user:profiles!tasks_assigned_to_fkey(
          email,
          full_name
        )
      `
        )
        .single();

      if (updateError) throw updateError;

      // Close Modal and Refresh
      setIsEditDialogOpen(false);
      router.refresh();
    } catch (error) {
      console.error('Error updating task:', error);
      setError(
        error instanceof Error ? error.message : 'Failed to update task'
      );
    } finally {
      setIsSubmitting(false);
    }
  };

  // Handle Task Deletion
  const handleDelete = async () => {
    if (
      !window.confirm(
        'Are you sure you want to delete this task? This action cannot be undone.'
      )
    ) {
      return;
    }

    try {
      setIsDeleting(true);

      // Delete task (comments will be cascade deleted)
      const { error: deleteError } = await supabase
        .from('tasks')
        .delete()
        .eq('id', task.id);

      if (deleteError) throw deleteError;

      router.push('/tasks');
    } catch (error) {
      console.error('Error deleting task:', error);
      setError(
        error instanceof Error ? error.message : 'Failed to delete task'
      );
    } finally {
      setIsDeleting(false);
    }
  };

  return (
    <div className="flex items-center gap-2">
      {/* Edit Button */}
      <Button
        variant="default"
        size="sm"
        onClick={() => {
          setIsEditDialogOpen(true);
          fetchProfiles(); // Fetch profiles when edit dialog opens
        }}
        disabled={isSubmitting || isDeleting}
      >
        <Edit className="h-4 w-4 mr-1" />
        Edit Task
      </Button>

      {/* Delete Button */}
      <Button
        variant="destructive"
        size="sm"
        onClick={handleDelete}
        disabled={isDeleting}
      >
        <Trash2 className="h-4 w-4 mr-1" />
        Delete Task
      </Button>

      {/* Edit Dialog */}
      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Edit Task</DialogTitle>
          </DialogHeader>

          {/* **Error Message** */}
          {error && (
            <div className="bg-red-50 dark:bg-red-900/50 text-red-600 dark:text-red-200 p-3 rounded-md text-sm">
              {error}
            </div>
          )}

          {/* **Edit Task Form** */}
          <form onSubmit={handleEdit} className="space-y-4">
            {/* **Title Field** */}
            <div>
              <Label htmlFor="title">Title</Label>
              <Input
                id="title"
                name="title"
                required
                placeholder="Enter task title"
                value={title}
                onChange={(e) => setTitle(e.target.value)}
              />
            </div>

            {/* **Description Field** */}
            <div>
              <Label htmlFor="description">Description</Label>
              <Textarea
                id="description"
                name="description"
                required
                placeholder="Enter task description"
                className="min-h-[100px]"
                value={description}
                onChange={(e) => setDescription(e.target.value)}
              />
            </div>

            {/* **Task Type Field** */}
            <div>
              <Label htmlFor="task_type">Task Type</Label>
              <select
                id="task_type" // Updated
                name="task_type" // Updated
                required
                value={taskType} // Updated
                onChange={(e) => setTaskType(e.target.value as TaskCategory)}
                className="w-full h-10 rounded-md border border-slate-200 dark:border-slate-700 bg-white dark:bg-slate-900 px-3 py-2"
              >
                <option value="general">General Task</option>
                <option value="minuted">Minuted Action</option>
              </select>
            </div>

            {/* **Priority Field** */}
            <div>
              <Label htmlFor="priority">Priority</Label>
              <select
                id="priority"
                name="priority"
                required
                value={priority}
                onChange={(e) => setPriority(e.target.value as TaskPriority)}
                className="w-full h-10 rounded-md border border-slate-200 dark:border-slate-700 bg-white dark:bg-slate-900 px-3 py-2"
              >
                <option value="low">Low</option>
                <option value="medium">Medium</option>
                <option value="high">High</option>
                <option value="urgent">Urgent</option>
              </select>
            </div>

            {/* **Status Field** */}
            <div>
              <Label htmlFor="status">Status</Label>
              <select
                id="status"
                name="status"
                required
                value={status}
                onChange={(e) => setStatus(e.target.value as TaskStatus)}
                className="w-full h-10 rounded-md border border-slate-200 dark:border-slate-700 bg-white dark:bg-slate-900 px-3 py-2"
              >
                <option value="todo">To Do</option>
                <option value="in_progress">In Progress</option>
                <option value="completed">Completed</option>
                <option value="cancelled">Cancelled</option>
              </select>
            </div>

            {/* **Assign To Field** */}
            <div>
              <Label htmlFor="assigned_to">Assign To</Label>
              <select
                id="assigned_to"
                name="assigned_to"
                value={assignedTo || ''}
                onChange={(e) =>
                  setAssignedTo(e.target.value === '' ? null : e.target.value)
                }
                className="w-full h-10 rounded-md border border-slate-200 dark:border-slate-700 bg-white dark:bg-slate-900 px-3 py-2"
                disabled={isFetchingProfiles}
              >
                <option value="">Unassigned</option>
                {isFetchingProfiles ? (
                  <option disabled>Loading...</option>
                ) : (
                  profiles.map((profile) => (
                    <option key={profile.id} value={profile.id}>
                      {profile.full_name
                        ? `${profile.full_name} (${profile.email})`
                        : profile.email}
                    </option>
                  ))
                )}
              </select>
            </div>

            {/* **Form Actions** */}
            <div className="flex justify-end gap-2">
              <Button
                type="button"
                variant="outline"
                onClick={() => setIsEditDialogOpen(false)}
                disabled={isSubmitting}
              >
                Cancel
              </Button>
              <Button type="submit" disabled={isSubmitting}>
                {isSubmitting ? 'Saving...' : 'Save Changes'}
              </Button>
            </div>
          </form>
        </DialogContent>
      </Dialog>
    </div>
  );
}



================================================================================
// File: [id]/task-details.tsx
================================================================================

// app/(default)/tasks/[id]/task-details.tsx

'use client';

import { format } from 'date-fns';
import { TaskWithDetails } from '@/types/tasks';

interface TaskDetailsProps {
  task: TaskWithDetails;
}

export default function TaskDetails({ task }: TaskDetailsProps) {
  return (
    <div className="bg-white dark:bg-slate-800 rounded-lg border border-slate-200 dark:border-slate-700">
      <div className="px-5 py-4">
        <div className="mb-4">
          <h2 className="font-semibold text-slate-800 dark:text-slate-100">
            Task Details
          </h2>
        </div>

        <div className="space-y-4">
          {/* Description */}
          <div>
            <h3 className="text-sm font-medium text-slate-800 dark:text-slate-100 mb-1">
              Description
            </h3>
            <div className="text-sm text-slate-500 dark:text-slate-400 whitespace-pre-wrap break-words max-h-[300px] overflow-y-auto">
              {task.description || '-'}
            </div>
          </div>

          {/* Assigned To */}
          <div>
            <h3 className="text-sm font-medium text-slate-800 dark:text-slate-100 mb-1">
              Assigned To
            </h3>
            <div className="text-sm text-slate-500 dark:text-slate-400">
              {task.assigned_to_user?.full_name ||
                task.assigned_to_user?.email ||
                '-'}
            </div>
          </div>

          {/* Priority */}
          <div>
            <h3 className="text-sm font-medium text-slate-800 dark:text-slate-100 mb-1">
              Priority
            </h3>
            <div className="text-sm text-slate-500 dark:text-slate-400">
              {task.priority ? 
                task.priority.charAt(0).toUpperCase() + task.priority.slice(1)
                : '-'
              }
            </div>
          </div>

          {/* Due Date */}
          {task.due_date && (
            <div>
              <h3 className="text-sm font-medium text-slate-800 dark:text-slate-100 mb-1">
                Due Date
              </h3>
              <div className="text-sm text-slate-500 dark:text-slate-400">
                {format(new Date(task.due_date), 'MMM d, yyyy')}
              </div>
            </div>
          )}

          {/* Created At */}
          <div>
            <h3 className="text-sm font-medium text-slate-800 dark:text-slate-100 mb-1">
              Created
            </h3>
            <div className="text-sm text-slate-500 dark:text-slate-400">
              {format(new Date(task.created_at), 'MMM d, yyyy h:mm a')}
            </div>
          </div>

          {/* Last Updated */}
          <div>
            <h3 className="text-sm font-medium text-slate-800 dark:text-slate-100 mb-1">
              Last Updated
            </h3>
            <div className="text-sm text-slate-500 dark:text-slate-400">
              {format(new Date(task.updated_at), 'MMM d, yyyy h:mm a')}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}



================================================================================
// File: [id]/task-header.tsx
================================================================================

// app/(default)/tasks/[id]/task-header.tsx

'use client';

import Link from 'next/link';
import { TaskWithDetails, TaskStatus, TaskPriority } from '@/types/tasks';
import TaskActions from './task-actions';

interface TaskHeaderProps {
  task: TaskWithDetails;
}

export default function TaskHeader({ task }: TaskHeaderProps) {
  const getStatusColor = (status: TaskStatus) => {
    const colors = {
      pending: 'text-yellow-600 dark:text-yellow-400',
      in_progress: 'text-blue-600 dark:text-blue-400',
      completed: 'text-green-600 dark:text-green-400',
      cancelled: 'text-slate-600 dark:text-slate-400',
      todo: 'text-slate-600 dark:text-slate-400'
    };
    return colors[status] || colors.pending;
  };

  const getPriorityColor = (priority: TaskPriority) => {
    const colors = {
      low: 'text-slate-600 dark:text-slate-400',
      medium: 'text-blue-600 dark:text-blue-400',
      high: 'text-orange-600 dark:text-orange-400',
      urgent: 'text-red-600 dark:text-red-400',
    };
    return colors[priority] || colors.medium;
  };

  return (
    <div className="mb-8">
      {/* Back button */}
      <div className="mb-4">
        <Link
          href="/tasks"
          className="text-sm font-medium text-coop-600 hover:text-coop-700 dark:text-coop-400 dark:hover:text-coop-300"
        >
          ‚Üê Back to Tasks
        </Link>
      </div>

      <div className="flex flex-wrap gap-4 sm:flex-nowrap sm:justify-between sm:items-center">
        {/* Left: Title */}
        <div>
          <h1 className="text-2xl md:text-3xl text-slate-800 dark:text-slate-100 font-bold mb-2">
            {task.title}
          </h1>
          <div className="text-sm">
            <span className="text-slate-500 dark:text-slate-400">
              Type:{' '}
              {task.task_type === 'minuted' ? 'Minuted Action' : 'General Task'}
            </span>
          </div>
        </div>

        {/* Right: Status, Priority and Actions */}
        <div className="flex flex-col items-end gap-2">
          <div className="flex items-center gap-4">
            <div
              className={`inline-flex font-medium ${getStatusColor(
                task.status as TaskStatus
              )}`}
            >
              {task.status.charAt(0).toUpperCase() + task.status.slice(1)}
            </div>
            {task.priority && (
              <div
                className={`inline-flex font-medium ${getPriorityColor(
                  task.priority
                )}`}
              >
                {task.priority.charAt(0).toUpperCase() + task.priority.slice(1)}
              </div>
            )}
          </div>
          <TaskActions task={task} />
        </div>
      </div>
    </div>
  );
}



```