// Code files extracted from brighton-rock-members/app/(default)/maintenance
// Generated on 2024-11-30 15:16:41
// Included extensions: .tsx, .ts, .js, .jsx, .css, .scss, .sass, .json, .sql
// Excluded files: package-lock.json, yarn.lock, pnpm-lock.yaml, .DS_Store


================================================================================
// File: maintenance-header.tsx
================================================================================

// app/(default)/maintenance/maintenance-header.tsx

'use client';

import NewRequestModal from './new-request-modal';

// Export the House interface
export interface House {
  id: string;
  name: string;
}

interface MaintenanceHeaderProps {
  houses: House[];
}

export default function MaintenanceHeader({ houses }: MaintenanceHeaderProps) {
  return (
    <div className="sm:flex sm:justify-between sm:items-center mb-8">
      {/* Left: Title */}
      <div className="mb-4 sm:mb-0">
        <h1 className="text-2xl md:text-3xl text-slate-800 dark:text-slate-100 font-bold">
          Maintenance ✨
        </h1>
      </div>

      {/* Right: Actions */}
      <div className="grid grid-flow-col sm:auto-cols-max justify-start sm:justify-end gap-2">
        {/* Pass houses to NewRequestModal */}
        <NewRequestModal houses={houses} />
      </div>
    </div>
  );
}



================================================================================
// File: maintenance-list.tsx
================================================================================

// app/(default)/maintenance/maintenance-list.tsx

'use client'

import * as React from 'react'
import { useState } from 'react'
import { MaintenanceRequestWithDetails, MaintenanceStatus } from '@/types/maintenance'
import { format } from 'date-fns'
import Link from 'next/link'
import { Button } from '@/components/ui/button'

interface MaintenanceListProps {
  requests: MaintenanceRequestWithDetails[]
}

export default function MaintenanceList({ requests }: MaintenanceListProps) {
  const [statusFilter, setStatusFilter] = useState<MaintenanceStatus | 'all'>('all')

  const filteredRequests = requests.filter(request => 
    statusFilter === 'all' || request.status === statusFilter
  )

  const getStatusColor = (status: MaintenanceStatus) => {
    const colors = {
      pending: 'bg-yellow-100 dark:bg-yellow-900/50 text-yellow-800 dark:text-yellow-200',
      scheduled: 'bg-blue-100 dark:bg-blue-900/50 text-blue-800 dark:text-blue-200',
      in_progress: 'bg-purple-100 dark:bg-purple-900/50 text-purple-800 dark:text-purple-200',
      completed: 'bg-green-100 dark:bg-green-900/50 text-green-800 dark:text-green-200',
      cancelled: 'bg-gray-100 dark:bg-gray-900/50 text-gray-800 dark:text-gray-200'
    }
    return colors[status]
  }

  return (
    <div>
      {/* Filters */}
      <div className="mb-4 flex flex-wrap gap-2">
        <Button
          onClick={() => setStatusFilter('all')}
          variant={statusFilter === 'all' ? 'default' : 'outline'}
          size="sm"
        >
          All
        </Button>
        {['pending', 'scheduled', 'in_progress', 'completed', 'cancelled'].map((status) => (
          <Button
            key={status}
            onClick={() => setStatusFilter(status as MaintenanceStatus)}
            variant={statusFilter === status ? 'default' : 'outline'}
            size="sm"
          >
            {status.charAt(0).toUpperCase() + status.slice(1).replace('_', ' ')}
          </Button>
        ))}
      </div>

      {/* Table */}
      <div className="bg-white dark:bg-slate-800 rounded-lg border border-slate-200 dark:border-slate-700 relative">
        <div className="overflow-x-auto">
          <table className="table-auto w-full divide-y divide-slate-200 dark:divide-slate-700">
            {/* Table header */}
            <thead className="text-xs uppercase text-slate-500 dark:text-slate-400 bg-slate-50 dark:bg-slate-900/20">
              <tr>
                <th className="px-4 py-3">
                  <div className="font-semibold text-left">Title</div>
                </th>
                <th className="px-4 py-3">
                  <div className="font-semibold text-left">House</div>
                </th>
                <th className="px-4 py-3">
                  <div className="font-semibold text-left">Status</div>
                </th>
                <th className="px-4 py-3">
                  <div className="font-semibold text-left">Reported By</div>
                </th>
                <th className="px-4 py-3">
                  <div className="font-semibold text-left">Date</div>
                </th>
                <th className="px-4 py-3">
                  <div className="font-semibold text-left">Next P4P Visit</div>
                </th>
              </tr>
            </thead>
            {/* Table body */}
            <tbody className="divide-y divide-slate-200 dark:divide-slate-700">
              {filteredRequests.map((request) => {
                const nextVisit = request.visits
                  .filter(v => !v.completed_at && new Date(v.scheduled_date) > new Date())
                  .sort((a, b) => new Date(a.scheduled_date).getTime() - new Date(b.scheduled_date).getTime())[0]

                return (
                  <tr key={request.id}>
                    <td className="px-4 py-3">
                      <Link 
                        href={`/maintenance/${request.id}`}
                        className="text-coop-600 hover:text-coop-700 dark:text-coop-400 dark:hover:text-coop-300 font-medium"
                      >
                        {request.title}
                      </Link>
                    </td>
                    <td className="px-4 py-3">
                      <div className="text-slate-800 dark:text-slate-100">
                        {request.house.name}
                      </div>
                    </td>
                    <td className="px-4 py-3">
                      <div className={`inline-flex font-medium rounded-full text-center px-2.5 py-0.5 ${getStatusColor(request.status)}`}>
                        {request.status.charAt(0).toUpperCase() + request.status.slice(1).replace('_', ' ')}
                      </div>
                    </td>
                    <td className="px-4 py-3">
                      <div className="text-slate-800 dark:text-slate-100">
                        {request.reported_by_user.full_name || request.reported_by_user.email}
                      </div>
                    </td>
                    <td className="px-4 py-3">
                      <div className="text-slate-800 dark:text-slate-100">
                        {format(new Date(request.created_at), 'MMM d, yyyy')}
                      </div>
                    </td>
                    <td className="px-4 py-3">
                      <div className="text-slate-800 dark:text-slate-100">
                        {nextVisit 
                          ? format(new Date(nextVisit.scheduled_date), 'MMM d, yyyy h:mm a')
                          : '-'
                        }
                      </div>
                    </td>
                  </tr>
                )
              })}
              {filteredRequests.length === 0 && (
                <tr>
                  <td colSpan={6} className="px-4 py-8 text-center text-slate-500 dark:text-slate-400">
                    No maintenance requests found
                  </td>
                </tr>
              )}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  )
} 


================================================================================
// File: new-request-modal.tsx
================================================================================

// app/(default)/maintenance/new-request-modal.tsx

'use client';

import { Fragment, useState } from 'react';
import { Dialog, Transition } from '@headlessui/react';
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs';
import { useRouter } from 'next/navigation';
import { MaintenancePriority } from '@/types/maintenance';
import { House } from '@/types/house';
import { Button } from '@/components/ui/button';

interface NewRequestModalProps {
  houses: House[];
}

export default function NewRequestModal({ houses }: NewRequestModalProps) {
  const [isOpen, setIsOpen] = useState(false);
  const router = useRouter();
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [selectedHouse, setSelectedHouse] = useState('');
  const [title, setTitle] = useState('');
  const [description, setDescription] = useState('');
  const [priority, setPriority] = useState<MaintenancePriority>('medium');
  const supabase = createClientComponentClient();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsSubmitting(true);
    setError(null);

    try {
      const {
        data: { user },
        error: authError,
      } = await supabase.auth.getUser();
      if (authError) throw authError;
      if (!user) throw new Error('User not found');

      if (!selectedHouse) {
        throw new Error('Please select a house');
      }

      const { error: insertError } = await supabase
        .from('maintenance_requests')
        .insert({
          title,
          description,
          house_id: selectedHouse,
          priority,
          reported_by: user.id,
          status: 'pending',
        });

      if (insertError) throw insertError;

      router.refresh();
      setIsOpen(false);
    } catch (err) {
      console.error('Error creating request:', err);
      setError(err instanceof Error ? err.message : 'Failed to create request');
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <>
      <button
        className="btn bg-coop-600 hover:bg-coop-700 text-white"
        onClick={() => setIsOpen(true)}
      >
        <svg
          className="w-4 h-4 fill-current opacity-50 shrink-0"
          viewBox="0 0 16 16"
        >
          <path d="M15 7H9V1c0-.6-.4-1-1-1S7 .4 7 1v6H1c-.6 0-1 .4-1 1s.4 1 1 1h6v6c0 .6.4 1 1 1s1-.4 1-1V9h6c.6 0 1-.4 1-1s-.4-1-1-1z" />
        </svg>
        <span className="hidden xs:block ml-2">New Maintenance Job</span>
      </button>

      <Transition show={isOpen} as={Fragment}>
        <Dialog onClose={() => setIsOpen(false)} className="relative z-50">
          {/* Background overlay */}
          <Transition.Child
            as={Fragment}
            enter="ease-out duration-300"
            enterFrom="opacity-0"
            enterTo="opacity-100"
            leave="ease-in duration-200"
            leaveFrom="opacity-100"
            leaveTo="opacity-0"
          >
            <div className="fixed inset-0 bg-black/30" />
          </Transition.Child>

          {/* Dialog content */}
          <div className="fixed inset-0 overflow-y-auto">
            <div className="flex min-h-full items-center justify-center p-4">
              <Transition.Child
                as={Fragment}
                enter="ease-out duration-300"
                enterFrom="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"
                enterTo="opacity-100 translate-y-0 sm:scale-100"
                leave="ease-in duration-200"
                leaveFrom="opacity-100 translate-y-0 sm:scale-100"
                leaveTo="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"
              >
                <Dialog.Panel className="w-full max-w-lg rounded-lg bg-white dark:bg-slate-800 p-6 shadow-xl">
                  <Dialog.Title className="text-lg font-semibold text-slate-800 dark:text-slate-100 mb-4">
                    New Maintenance Job
                  </Dialog.Title>

                  <form onSubmit={handleSubmit} className="space-y-4">
                    {error && (
                      <div className="rounded-md bg-red-50 p-4">
                        <p className="text-sm text-red-700">{error}</p>
                      </div>
                    )}

                    {/* Title */}
                    <div>
                      <label
                        htmlFor="title"
                        className="block text-sm font-medium text-slate-700 dark:text-slate-300"
                      >
                        Title
                      </label>
                      <input
                        type="text"
                        id="title"
                        value={title}
                        onChange={(e) => setTitle(e.target.value)}
                        required
                        className="mt-1 block w-full rounded-md border border-slate-300 dark:border-slate-600 bg-white dark:bg-slate-700 px-3 py-2 text-sm text-slate-900 dark:text-slate-100 placeholder-slate-400 focus:border-coop-500 focus:outline-none focus:ring-1 focus:ring-coop-500"
                      />
                    </div>

                    {/* Description */}
                    <div>
                      <label
                        htmlFor="description"
                        className="block text-sm font-medium text-slate-700 dark:text-slate-300"
                      >
                        Description
                      </label>
                      <textarea
                        id="description"
                        value={description}
                        onChange={(e) => setDescription(e.target.value)}
                        required
                        rows={3}
                        className="mt-1 block w-full rounded-md border border-slate-300 dark:border-slate-600 bg-white dark:bg-slate-700 px-3 py-2 text-sm text-slate-900 dark:text-slate-100 placeholder-slate-400 focus:border-coop-500 focus:outline-none focus:ring-1 focus:ring-coop-500"
                      />
                    </div>

                    {/* House */}
                    <div>
                      <label
                        htmlFor="house_id"
                        className="block text-sm font-medium text-slate-700 dark:text-slate-300"
                      >
                        House
                      </label>
                      <select
                        id="house_id"
                        required
                        onChange={(e) => setSelectedHouse(e.target.value)}
                        value={selectedHouse}
                        className="mt-1 block w-full rounded-md border border-slate-300 dark:border-slate-600 bg-white dark:bg-slate-700 px-3 py-2 text-sm text-slate-900 dark:text-slate-100 focus:border-coop-500 focus:outline-none focus:ring-1 focus:ring-coop-500"
                      >
                        <option value="">Select a house</option>
                        {houses.map((house) => (
                          <option key={house.id} value={house.id}>
                            {house.name}
                          </option>
                        ))}
                      </select>
                    </div>

                    {/* Priority */}
                    <div>
                      <label
                        htmlFor="priority"
                        className="block text-sm font-medium text-slate-700 dark:text-slate-300"
                      >
                        Priority
                      </label>
                      <select
                        id="priority"
                        value={priority}
                        onChange={(e) =>
                          setPriority(e.target.value as MaintenancePriority)
                        }
                        required
                        className="mt-1 block w-full rounded-md border border-slate-300 dark:border-slate-600 bg-white dark:bg-slate-700 px-3 py-2 text-sm text-slate-900 dark:text-slate-100 focus:border-coop-500 focus:outline-none focus:ring-1 focus:ring-coop-500"
                      >
                        <option value="low">Low</option>
                        <option value="medium">Medium</option>
                        <option value="high">High</option>
                        <option value="urgent">Urgent</option>
                      </select>
                    </div>

                    {/* Submit Button */}
                    <div className="flex justify-end space-x-3">
                      <Button
                        type="button"
                        variant="ghost"
                        onClick={() => setIsOpen(false)}
                      >
                        Cancel
                      </Button>
                      <Button type="submit" disabled={isSubmitting}>
                        {isSubmitting ? 'Creating...' : 'Create Request'}
                      </Button>
                    </div>
                  </form>
                </Dialog.Panel>
              </Transition.Child>
            </div>
          </div>
        </Dialog>
      </Transition>
    </>
  );
}



================================================================================
// File: page.tsx
================================================================================

// app/(default)/maintenance/page.tsx

import { Metadata } from 'next';
import MaintenanceList from './maintenance-list';
import MaintenanceHeader from './maintenance-header';
import { MaintenanceRequestWithDetails } from '@/types/maintenance';
import supabaseAdmin from '@/lib/supabaseAdmin';

export const metadata: Metadata = {
  title: 'Maintenance - Co-op Management',
  description: 'Manage maintenance requests and visits',
};

// Force dynamic rendering to ensure fresh data
export const dynamic = 'force-dynamic';
export const revalidate = 0;

async function getMaintenanceRequests() {
  try {
    const { data: requests, error } = await supabaseAdmin
      .from('maintenance_requests')
      .select(
        `
        *,
        house:houses!maintenance_requests_house_id_fkey(id, name),
        reported_by_user:profiles!maintenance_requests_reported_by_fkey(email, full_name),
        visits:maintenance_visits(*),
        comments:maintenance_comments(*)
      `
      )
      .order('created_at', { ascending: false });

    if (error) {
      console.error('Error fetching maintenance requests:', error);
      return [];
    }

    return requests as MaintenanceRequestWithDetails[];
  } catch (err) {
    console.error('Error fetching maintenance requests:', err);
    return [];
  }
}

async function getHouses() {
  try {
    const { data: houses, error } = await supabaseAdmin
      .from('houses')
      .select('id, name')
      .order('name');

    if (error) {
      console.error('Error fetching houses:', error);
      return [];
    }

    return houses;
  } catch (err) {
    console.error('Error fetching houses:', err);
    return [];
  }
}

export default async function MaintenancePage() {
  const [requests, houses] = await Promise.all([
    getMaintenanceRequests(),
    getHouses(),
  ]);

  return (
    <div className="px-4 sm:px-6 lg:px-8 py-8 w-full max-w-9xl mx-auto">
      <MaintenanceHeader houses={houses} />
      <MaintenanceList requests={requests} />
    </div>
  );
}



================================================================================
// File: [id]/comment-section.tsx
================================================================================

// app/(default)/maintenance/[id]/comment-section.tsx

'use client';

import { useState, useEffect } from 'react';
import { format } from 'date-fns';
import { useRouter } from 'next/navigation';
import { MaintenanceRequestWithDetails } from '@/types/maintenance';
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs';
import { Button } from '@/components/ui/button';

interface CommentUser {
  email: string;
  full_name: string | null;
}

interface Comment {
  id: string;
  user_id: string;
  request_id: string;
  comment: string;
  created_at: string;
  user: CommentUser;
}

interface CommentSectionProps {
  request: MaintenanceRequestWithDetails;
}

export default function CommentSection({ request }: CommentSectionProps) {
  const router = useRouter();
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [editingComment, setEditingComment] = useState<string | null>(null);
  const [currentUserId, setCurrentUserId] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);
  const supabase = createClientComponentClient();

  useEffect(() => {
    async function getCurrentUser() {
      const {
        data: { user },
        error: authError,
      } = await supabase.auth.getUser();
      if (authError) {
        console.error('Error fetching user:', authError);
        return;
      }
      setCurrentUserId(user?.id || null);
    }
    getCurrentUser();
  }, [supabase]);

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    if (isSubmitting) return;

    setIsSubmitting(true);
    setError(null);
    const form = e.currentTarget;
    const formData = new FormData(form);
    const commentText = formData.get('comment') as string;

    try {
      const {
        data: { user },
      } = await supabase.auth.getUser();
      if (!user) {
        setError('You must be logged in to comment');
        return;
      }

      // Add the comment
      const { error: insertError } = await supabase
        .from('maintenance_comments')
        .insert({
          request_id: request.id,
          user_id: user.id,
          comment: commentText,
        });

      if (insertError) {
        console.error('Error adding comment:', insertError);
        setError('Failed to add comment. Please try again.');
        return;
      }

      form.reset();
      router.refresh();
    } catch (err) {
      console.error('Error adding comment:', err);
      setError('Failed to add comment. Please try again.');
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleCommentUpdate = async (
    commentId: string,
    e: React.FormEvent<HTMLFormElement>
  ) => {
    e.preventDefault();
    if (isSubmitting) return;

    setIsSubmitting(true);
    setError(null);
    const form = e.currentTarget;
    const formData = new FormData(form);
    const commentText = formData.get('comment') as string;

    try {
      // Update the comment
      const { error: updateError } = await supabase
        .from('maintenance_comments')
        .update({ comment: commentText })
        .eq('id', commentId)
        .eq('user_id', currentUserId);

      if (updateError) {
        console.error('Error updating comment:', updateError);
        setError('Failed to update comment. Please try again.');
        return;
      }

      setEditingComment(null);
      router.refresh();
    } catch (err) {
      console.error('Error updating comment:', err);
      setError('Failed to update comment. Please try again.');
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleCommentDelete = async (commentId: string) => {
    if (!window.confirm('Are you sure you want to delete this comment?')) {
      return;
    }

    setError(null);
    try {
      const { error: deleteError } = await supabase
        .from('maintenance_comments')
        .delete()
        .eq('id', commentId)
        .eq('user_id', currentUserId);

      if (deleteError) {
        console.error('Error deleting comment:', deleteError);
        setError('Failed to delete comment. Please try again.');
        return;
      }

      router.refresh();
    } catch (err) {
      console.error('Error deleting comment:', err);
      setError('Failed to delete comment. Please try again.');
    }
  };

  const sortedComments = [...request.comments].sort(
    (a, b) =>
      new Date(b.created_at).getTime() - new Date(a.created_at).getTime()
  );

  return (
    <div className="bg-white dark:bg-slate-800 border border-slate-200 dark:border-slate-700 rounded-lg">
      <div className="px-5 py-4">
        <h2 className="font-semibold text-slate-800 dark:text-slate-100 mb-4">
          Comments
        </h2>

        {/* Comment List */}
        <div className="space-y-4 mb-6">
          {error && (
            <div className="rounded-lg bg-red-50 dark:bg-red-900/50 p-4 mb-4">
              <p className="text-sm text-red-700 dark:text-red-200">{error}</p>
            </div>
          )}

          {sortedComments.map((comment) => (
            <div
              key={comment.id}
              className="flex space-x-3 p-3 bg-slate-50 dark:bg-slate-900/50 rounded-lg"
            >
              <div className="flex-shrink-0">
                <div className="w-8 h-8 rounded-full bg-coop-600 flex items-center justify-center">
                  <span className="text-sm font-medium text-white">
                    {comment.user.full_name?.charAt(0).toUpperCase() || comment.user.email.charAt(0).toUpperCase()}
                  </span>
                </div>
              </div>
              <div className="flex-grow">
                {editingComment === comment.id ? (
                  <form
                    onSubmit={(e) => handleCommentUpdate(comment.id, e)}
                    className="space-y-2"
                  >
                    <textarea
                      name="comment"
                      defaultValue={comment.comment}
                      required
                      rows={2}
                      className="block w-full rounded-lg border border-slate-300 dark:border-slate-600 bg-white dark:bg-slate-700 px-3 py-2 text-sm text-slate-900 dark:text-slate-100"
                    />
                    <div className="flex justify-end space-x-2">
                      <Button
                        type="button"
                        variant="ghost"
                        onClick={() => setEditingComment(null)}
                      >
                        Cancel
                      </Button>
                      <Button
                        type="submit"
                        disabled={isSubmitting}
                        variant="default"
                      >
                        Save
                      </Button>
                    </div>
                  </form>
                ) : (
                  <>
                    <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-1">
                      <div className="text-sm font-medium text-slate-800 dark:text-slate-100">
                        {comment.user.full_name || comment.user.email}
                      </div>
                      <div className="text-xs text-slate-500 dark:text-slate-400">
                        {format(
                          new Date(comment.created_at),
                          'MMM d, yyyy h:mm a'
                        )}
                      </div>
                    </div>
                    <div className="text-sm text-slate-600 dark:text-slate-300 whitespace-pre-wrap">
                      {comment.comment}
                    </div>
                    {currentUserId === comment.user_id && (
                      <div className="mt-2 flex space-x-2">
                        <button
                          onClick={() => setEditingComment(comment.id)}
                          className="text-sm font-medium text-coop-600 hover:text-coop-700 dark:text-coop-400 dark:hover:text-coop-300"
                        >
                          Edit
                        </button>
                        <button
                          onClick={() => handleCommentDelete(comment.id)}
                          className="text-sm font-medium text-red-600 hover:text-red-700 dark:text-red-400 dark:hover:text-red-300"
                        >
                          Delete
                        </button>
                      </div>
                    )}
                  </>
                )}
              </div>
            </div>
          ))}
          {request.comments.length === 0 && (
            <div className="text-sm text-slate-500 dark:text-slate-400 text-center py-4">
              No comments yet
            </div>
          )}
        </div>

        {/* Comment Form */}
        <form onSubmit={handleSubmit} className="space-y-4">
          <div>
            <label htmlFor="comment" className="sr-only">
              Add a comment
            </label>
            <textarea
              name="comment"
              id="comment"
              rows={3}
              required
              className="mt-1 block w-full rounded-lg border border-slate-300 dark:border-slate-600 bg-white dark:bg-slate-700 px-3 py-2 text-sm text-slate-900 dark:text-slate-100 placeholder-slate-400 focus:border-coop-500 focus:outline-none focus:ring-1 focus:ring-coop-500"
              placeholder="Add a comment..."
            />
          </div>

          <div className="flex justify-end">
            <button
              type="submit"
              disabled={isSubmitting}
              className="rounded-lg bg-coop-600 px-3 py-2 text-sm font-semibold text-white hover:bg-coop-700 dark:bg-coop-500 dark:hover:bg-coop-600 focus:outline-none focus:ring-2 focus:ring-coop-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {isSubmitting ? 'Adding...' : 'Add Comment'}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}



================================================================================
// File: [id]/page.tsx
================================================================================

// app/(default)/maintenance/[id]/page.tsx

import { Metadata } from 'next';
import { notFound } from 'next/navigation';
import supabaseAdmin from '@/lib/supabaseAdmin';
import { MaintenanceRequestWithDetails } from '@/types/maintenance';
import RequestHeader from './request-header';
import RequestDetails from './request-details';
import VisitScheduler from './visit-scheduler';
import CommentSection from './comment-section';

export const metadata: Metadata = {
  title: 'Maintenance Request - Co-op Management',
  description: 'View and manage maintenance request details',
};

// Force dynamic rendering to ensure fresh data
export const dynamic = 'force-dynamic';
export const revalidate = 0;

async function getMaintenanceRequest(id: string) {
  try {
    const { data: request, error } = await supabaseAdmin
      .from('maintenance_requests')
      .select(
        `
        *,
        house:houses!maintenance_requests_house_id_fkey(name),
        reported_by_user:profiles!maintenance_requests_reported_by_fkey(email, full_name),
        visits:maintenance_visits(
          id,
          scheduled_date,
          estimated_duration,
          notes,
          completed_at,
          created_at
        ),
        comments:maintenance_comments(
          id,
          comment,
          created_at,
          user_id,
          user:profiles!maintenance_comments_user_id_fkey(
            email,
            full_name
          )
        )
      `
      )
      .eq('id', id)
      .order('created_at', {
        foreignTable: 'maintenance_visits',
        ascending: true,
      })
      .order('created_at', {
        foreignTable: 'maintenance_comments',
        ascending: true,
      })
      .single();

    if (error) {
      if (error.code === 'PGRST116') {
        return null;
      }
      throw error;
    }

    return request as MaintenanceRequestWithDetails;
  } catch (err) {
    console.error('Error fetching maintenance request:', err);
    return null;
  }
}

interface MaintenanceRequestPageProps {
  params: {
    id: string;
  };
}

export default async function MaintenanceRequestPage({
  params,
}: MaintenanceRequestPageProps) {
  const request = await getMaintenanceRequest(params.id);

  if (!request) {
    notFound();
  }

  return (
    <div className="px-4 sm:px-6 lg:px-8 py-8 w-full max-w-9xl mx-auto">
      <RequestHeader request={request} />

      <div className="grid grid-cols-1 xl:grid-cols-3 gap-6 mt-6">
        {/* Left column - Request details and comments */}
        <div className="xl:col-span-2 space-y-6">
          <RequestDetails request={request} />
          <CommentSection request={request} />
        </div>

        {/* Right column - Visit scheduling */}
        <div>
          <VisitScheduler request={request} />
        </div>
      </div>
    </div>
  );
}



================================================================================
// File: [id]/request-details.tsx
================================================================================

// app/(default)/maintenance/[id]/request-details.tsx

'use client'

import { useState } from 'react'
import { useRouter } from 'next/navigation'
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs'
import { format } from 'date-fns'
import { MaintenanceRequestWithDetails } from '@/types/maintenance'

interface RequestDetailsProps {
  request: MaintenanceRequestWithDetails
}

export default function RequestDetails({ request }: RequestDetailsProps) {
  const router = useRouter()
  const [editingVisit, setEditingVisit] = useState<string | null>(null)
  const [isSubmitting, setIsSubmitting] = useState(false)
  const supabase = createClientComponentClient()
  const now = new Date()
  
  // Separate visits into upcoming and past
  const upcomingVisits = request.visits
    .filter(v => !v.completed_at && new Date(v.scheduled_date) > now)
    .sort((a, b) => new Date(a.scheduled_date).getTime() - new Date(b.scheduled_date).getTime())

  const pastVisits = request.visits
    .filter(v => v.completed_at || new Date(v.scheduled_date) <= now)
    .sort((a, b) => new Date(b.scheduled_date).getTime() - new Date(a.scheduled_date).getTime())

  const handleVisitUpdate = async (visitId: string, e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault()
    if (isSubmitting) return

    setIsSubmitting(true)
    const form = e.currentTarget
    const formData = new FormData(form)

    try {
      const { error: updateError } = await supabase
        .from('maintenance_visits')
        .update({
          scheduled_date: `${formData.get('scheduled_date')}T${formData.get('scheduled_time')}:00`,
          estimated_duration: `${formData.get('estimated_duration')} hours`,
          notes: formData.get('notes') || null
        })
        .eq('id', visitId)

      if (updateError) throw updateError

      setEditingVisit(null)
      router.refresh()
    } catch (err) {
      console.error('Error updating visit:', err)
    } finally {
      setIsSubmitting(false)
    }
  }

  const handleVisitDelete = async (visitId: string) => {
    if (!window.confirm('Are you sure you want to delete this visit?')) {
      return
    }

    try {
      const { error } = await supabase
        .from('maintenance_visits')
        .delete()
        .eq('id', visitId)

      if (error) throw error

      router.refresh()
    } catch (err) {
      console.error('Error deleting visit:', err)
    }
  }

  return (
    <div className="bg-white dark:bg-slate-800 border border-slate-200 dark:border-slate-700 rounded-lg">
      <div className="px-5 py-4">
        <h2 className="font-semibold text-slate-800 dark:text-slate-100 mb-4">Request Details</h2>

        <div className="space-y-4">
          <div>
            <h3 className="text-sm font-semibold text-slate-800 dark:text-slate-100 mb-2">Description</h3>
            <p className="text-sm text-slate-600 dark:text-slate-400">{request.description}</p>
          </div>

          <div>
            <h3 className="text-sm font-semibold text-slate-800 dark:text-slate-100 mb-2">House</h3>
            <p className="text-sm text-slate-600 dark:text-slate-400">{request.house.name}</p>
          </div>

          <div>
            <h3 className="text-sm font-semibold text-slate-800 dark:text-slate-100 mb-2">Reported By</h3>
            <p className="text-sm text-slate-600 dark:text-slate-400">
              {request.reported_by_user.full_name || request.reported_by_user.email}
            </p>
          </div>

          <div>
            <h3 className="text-sm font-semibold text-slate-800 dark:text-slate-100 mb-2">Date Reported</h3>
            <p className="text-sm text-slate-600 dark:text-slate-400">
              {format(new Date(request.created_at), 'MMM d, yyyy h:mm a')}
            </p>
          </div>

          <div>
            <h3 className="text-sm font-semibold text-slate-800 dark:text-slate-100 mb-2">Visit History</h3>
            <div className="space-y-3">
              {upcomingVisits.length > 0 && (
                <div>
                  <h4 className="text-sm font-medium text-slate-600 dark:text-slate-400 mb-2">Upcoming Visits</h4>
                  {upcomingVisits.map((visit) => (
                    <div 
                      key={visit.id}
                      className="flex items-start p-3 bg-slate-50 dark:bg-slate-900/50 rounded-lg mb-2"
                    >
                      {editingVisit === visit.id ? (
                        <form onSubmit={(e) => handleVisitUpdate(visit.id, e)} className="w-full space-y-3">
                          <div className="grid grid-cols-1 sm:grid-cols-2 gap-3">
                            <div>
                              <label className="block text-sm font-medium text-slate-700 dark:text-slate-300">Date</label>
                              <input
                                type="date"
                                name="scheduled_date"
                                defaultValue={visit.scheduled_date.split('T')[0]}
                                required
                                className="mt-1 block w-full rounded-lg border border-slate-300 dark:border-slate-600 bg-white dark:bg-slate-700 px-3 py-2 text-sm"
                              />
                            </div>
                            <div>
                              <label className="block text-sm font-medium text-slate-700 dark:text-slate-300">Time</label>
                              <input
                                type="time"
                                name="scheduled_time"
                                defaultValue={visit.scheduled_date.split('T')[1].substring(0, 5)}
                                required
                                className="mt-1 block w-full rounded-lg border border-slate-300 dark:border-slate-600 bg-white dark:bg-slate-700 px-3 py-2 text-sm"
                              />
                            </div>
                          </div>
                          <div>
                            <label className="block text-sm font-medium text-slate-700 dark:text-slate-300">Duration</label>
                            <select
                              name="estimated_duration"
                              defaultValue={visit.estimated_duration.split(' ')[0]}
                              required
                              className="mt-1 block w-full rounded-lg border border-slate-300 dark:border-slate-600 bg-white dark:bg-slate-700 px-3 py-2 text-sm"
                            >
                              <option value="1">1 hour</option>
                              <option value="2">2 hours</option>
                              <option value="3">3 hours</option>
                              <option value="4">4 hours</option>
                              <option value="8">Full day (8 hours)</option>
                            </select>
                          </div>
                          <div>
                            <label className="block text-sm font-medium text-slate-700 dark:text-slate-300">Notes</label>
                            <textarea
                              name="notes"
                              defaultValue={visit.notes || ''}
                              rows={2}
                              className="mt-1 block w-full rounded-lg border border-slate-300 dark:border-slate-600 bg-white dark:bg-slate-700 px-3 py-2 text-sm"
                            />
                          </div>
                          <div className="flex justify-end space-x-2">
                            <button
                              type="button"
                              onClick={() => setEditingVisit(null)}
                              className="px-3 py-2 text-sm font-medium text-slate-600 hover:text-slate-800 dark:text-slate-400 dark:hover:text-slate-200"
                            >
                              Cancel
                            </button>
                            <button
                              type="submit"
                              disabled={isSubmitting}
                              className="px-3 py-2 text-sm font-medium text-white bg-coop-600 hover:bg-coop-700 dark:bg-coop-500 dark:hover:bg-coop-600 rounded-lg"
                            >
                              Save Changes
                            </button>
                          </div>
                        </form>
                      ) : (
                        <>
                          <div className="grow">
                            <div className="text-sm font-semibold text-slate-800 dark:text-slate-100 mb-1">
                              {format(new Date(visit.scheduled_date), 'MMM d, yyyy h:mm a')}
                            </div>
                            <div className="text-sm text-slate-600 dark:text-slate-300">
                              Estimated Duration: {visit.estimated_duration}
                            </div>
                            {visit.notes && (
                              <div className="text-sm text-slate-600 dark:text-slate-300 mt-1">
                                Notes: {visit.notes}
                              </div>
                            )}
                          </div>
                          <div className="flex space-x-2">
                            <button
                              onClick={() => setEditingVisit(visit.id)}
                              className="text-sm font-medium text-coop-600 hover:text-coop-700 dark:text-coop-400 dark:hover:text-coop-300"
                            >
                              Edit
                            </button>
                            <button
                              onClick={() => handleVisitDelete(visit.id)}
                              className="text-sm font-medium text-red-600 hover:text-red-700 dark:text-red-400 dark:hover:text-red-300"
                            >
                              Delete
                            </button>
                          </div>
                        </>
                      )}
                    </div>
                  ))}
                </div>
              )}

              {pastVisits.length > 0 && (
                <div>
                  <h4 className="text-sm font-medium text-slate-600 dark:text-slate-400 mb-2">Past Visits</h4>
                  {pastVisits.map((visit) => (
                    <div 
                      key={visit.id}
                      className="flex items-start p-3 bg-slate-50 dark:bg-slate-900/50 rounded-lg mb-2"
                    >
                      <div className="grow">
                        <div className="text-sm font-semibold text-slate-800 dark:text-slate-100 mb-1">
                          {format(new Date(visit.scheduled_date), 'MMM d, yyyy h:mm a')}
                        </div>
                        <div className="text-sm text-slate-600 dark:text-slate-300">
                          Estimated Duration: {visit.estimated_duration}
                        </div>
                        {visit.notes && (
                          <div className="text-sm text-slate-600 dark:text-slate-300 mt-1">
                            Notes: {visit.notes}
                          </div>
                        )}
                      </div>
                      {visit.completed_at && (
                        <span className="inline-flex items-center rounded-full bg-green-100 dark:bg-green-900 px-2.5 py-0.5 text-xs font-medium text-green-800 dark:text-green-200">
                          Completed
                        </span>
                      )}
                    </div>
                  ))}
                </div>
              )}

              {request.visits.length === 0 && (
                <p className="text-sm text-slate-500 dark:text-slate-400">No visits scheduled yet</p>
              )}
            </div>
          </div>
        </div>
      </div>
    </div>
  )
} 


================================================================================
// File: [id]/request-header.tsx
================================================================================

// app/(default)/maintenance/[id]/request-header.tsx

'use client';

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs';
import {
  MaintenanceRequestWithDetails,
  MaintenanceStatus,
} from '@/types/maintenance';
import Link from 'next/link';

interface RequestHeaderProps {
  request: MaintenanceRequestWithDetails;
}

export default function RequestHeader({ request }: RequestHeaderProps) {
  const router = useRouter();
  const [isUpdating, setIsUpdating] = useState(false);
  const [isDropdownOpen, setIsDropdownOpen] = useState(false);
  const supabase = createClientComponentClient();

  const getStatusColor = (status: MaintenanceStatus) => {
    const colors = {
      pending:
        'bg-yellow-100 dark:bg-yellow-900/50 text-yellow-800 dark:text-yellow-200',
      scheduled:
        'bg-blue-100 dark:bg-blue-900/50 text-blue-800 dark:text-blue-200',
      in_progress:
        'bg-purple-100 dark:bg-purple-900/50 text-purple-800 dark:text-purple-200',
      completed:
        'bg-green-100 dark:bg-green-900/50 text-green-800 dark:text-green-200',
      cancelled:
        'bg-gray-100 dark:bg-gray-900/50 text-gray-800 dark:text-gray-200',
    };
    return colors[status];
  };

  const handleStatusChange = async (status: MaintenanceStatus) => {
    setIsUpdating(true);
    try {
      const { error } = await supabase
        .from('maintenance_requests')
        .update({ status })
        .eq('id', request.id);

      if (error) throw error;
      router.refresh();
      setIsDropdownOpen(false);
    } catch (err) {
      console.error('Error updating status:', err);
    } finally {
      setIsUpdating(false);
    }
  };

  const statusOptions: MaintenanceStatus[] = [
    'pending',
    'scheduled',
    'in_progress',
    'completed',
    'cancelled',
  ];

  return (
    <div className="mb-8">
      <Link
        href="/maintenance"
        className="text-sm font-medium text-coop-600 hover:text-coop-700 dark:text-coop-400 dark:hover:text-coop-300"
      >
        ← Back to Maintenance
      </Link>

      <div className="flex justify-between items-center mt-2">
        <h1 className="text-2xl font-bold text-slate-800 dark:text-slate-100">
          {request.title}
        </h1>

        <div className="flex items-center space-x-3">
          <Link
            href={`/maintenance/${request.id}/edit`}
            className="text-sm font-medium text-coop-600 hover:text-coop-700 dark:text-coop-400 dark:hover:text-coop-300"
          >
            Edit Details
          </Link>

          <div className="relative">
            <button
              onClick={() => setIsDropdownOpen(!isDropdownOpen)}
              disabled={isUpdating}
              className={`inline-flex items-center justify-center rounded-lg px-3 py-2 text-sm font-medium transition-colors ${getStatusColor(
                request.status
              )}`}
            >
              {request.status.charAt(0).toUpperCase() +
                request.status.slice(1).replace('_', ' ')}
              <svg
                className="w-3 h-3 shrink-0 ml-2 fill-current opacity-70"
                viewBox="0 0 12 12"
              >
                <path d="M5.9 11.4L.5 6l1.4-1.4 4 4 4-4L11.3 6z" />
              </svg>
            </button>
            {isDropdownOpen && (
              <div className="origin-top-right absolute top-full right-0 mt-1 w-40 bg-white dark:bg-slate-800 border border-slate-200 dark:border-slate-700 py-1.5 rounded-lg overflow-hidden z-10">
                {statusOptions.map((status) => (
                  <button
                    key={status}
                    onClick={() => handleStatusChange(status)}
                    className={`w-full text-left px-3 py-1 text-sm font-medium transition-colors ${
                      status === request.status
                        ? 'text-coop-600 dark:text-coop-400'
                        : 'text-slate-600 dark:text-slate-300 hover:text-slate-800 dark:hover:text-slate-100'
                    }`}
                  >
                    {status.charAt(0).toUpperCase() +
                      status.slice(1).replace('_', ' ')}
                  </button>
                ))}
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}



================================================================================
// File: [id]/visit-scheduler.tsx
================================================================================

// app/(default)/maintenance/[id]/visit-scheduler.tsx

'use client';

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs';
import { MaintenanceRequestWithDetails } from '@/types/maintenance';
import { Button } from '@/components/ui/button';

interface VisitSchedulerProps {
  request: MaintenanceRequestWithDetails;
}

export default function VisitScheduler({ request }: VisitSchedulerProps) {
  const router = useRouter();
  const [isSubmitting, setIsSubmitting] = useState(false);
  const supabase = createClientComponentClient();

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    if (isSubmitting) return;

    setIsSubmitting(true);
    const form = e.currentTarget;
    const formData = new FormData(form);

    try {
      const scheduledDate = `${formData.get('scheduled_date')}T${formData.get(
        'scheduled_time'
      )}:00`;
      const estimatedDuration = formData.get('estimated_duration') as string;
      const notes = formData.get('notes') || null;

      // Insert the visit
      const { error: insertError } = await supabase
        .from('maintenance_visits')
        .insert({
          request_id: request.id,
          scheduled_date: scheduledDate,
          estimated_duration: `${estimatedDuration} hours`,
          notes,
        });

      if (insertError) throw insertError;

      // Only update status if it's pending
      if (request.status === 'pending') {
        const { error: updateError } = await supabase
          .from('maintenance_requests')
          .update({ status: 'scheduled' })
          .eq('id', request.id);

        if (updateError) throw updateError;
      }

      // Insert an event into the calendar_events table
      const scheduledTime = new Date(scheduledDate);
      let endTime = new Date(
        scheduledTime.getTime() + parseInt(estimatedDuration) * 60 * 60 * 1000
      );

      const { error: calendarError } = await supabase
        .from('calendar_events')
        .insert({
          title: 'P4P Visit',
          description: `Maintenance visit for: ${request.title}`,
          start_time: scheduledTime.toISOString(),
          end_time: endTime.toISOString(),
          event_type: 'maintenance',
          category: 'P4P Visit', // Ensure this matches your legend and color mapping
        });

      if (calendarError) throw calendarError;

      form.reset();
      router.refresh();
    } catch (err) {
      console.error('Error scheduling visit:', err);
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className="bg-white dark:bg-slate-800 border border-slate-200 dark:border-slate-700 rounded-lg">
      <div className="px-5 py-4">
        <h2 className="font-semibold text-slate-800 dark:text-slate-100 mb-4">
          Schedule Visit
        </h2>

        <form onSubmit={handleSubmit} className="space-y-4">
          {/* Date */}
          <div>
            <label
              htmlFor="scheduled_date"
              className="block text-sm font-medium text-slate-700 dark:text-slate-300"
            >
              Date
            </label>
            <input
              type="date"
              name="scheduled_date"
              id="scheduled_date"
              required
              min={new Date().toISOString().split('T')[0]}
              className="mt-1 block w-full rounded-lg border"
            />
          </div>

          {/* Time */}
          <div>
            <label
              htmlFor="scheduled_time"
              className="block text-sm font-medium text-slate-700 dark:text-slate-300"
            >
              Time
            </label>
            <input
              type="time"
              name="scheduled_time"
              id="scheduled_time"
              required
              className="mt-1 block w-full rounded-lg border"
            />
          </div>

          {/* Estimated Duration */}
          <div>
            <label
              htmlFor="estimated_duration"
              className="block text-sm font-medium text-slate-700 dark:text-slate-300"
            >
              Estimated Duration (hours)
            </label>
            <select
              name="estimated_duration"
              id="estimated_duration"
              required
              defaultValue="1"
              className="mt-1 block w-full rounded-lg border"
            >
              <option value="1">1 hour</option>
              <option value="2">2 hours</option>
              <option value="3">3 hours</option>
              <option value="4">4 hours</option>
              <option value="8">Full day (8 hours)</option>
            </select>
          </div>

          {/* Notes */}
          <div>
            <label
              htmlFor="notes"
              className="block text-sm font-medium text-slate-700 dark:text-slate-300"
            >
              Notes
            </label>
            <textarea
              name="notes"
              id="notes"
              rows={3}
              className="mt-1 block w-full rounded-lg border"
              placeholder="Any special instructions or notes for the visit"
            />
          </div>

          {/* Submit Button */}
          <div className="flex justify-end">
            <Button type="submit" disabled={isSubmitting}>
              {isSubmitting ? 'Scheduling...' : 'Schedule Visit'}
            </Button>
          </div>
        </form>
      </div>
    </div>
  );
}



================================================================================
// File: [id]/edit/page.tsx
================================================================================

// app/(default)/maintenance/[id]/edit/page.tsx

'use client'

import * as React from 'react'
import { useState, useEffect } from 'react'
import { useRouter } from 'next/navigation'
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs'
import { MaintenanceRequestWithDetails, MaintenancePriority, MaintenanceStatus } from '@/types/maintenance'
import Link from 'next/link'
import { format } from 'date-fns'
import { Button } from '@/components/ui/button'

export default function EditMaintenanceRequest({ params }: { params: { id: string } }) {
  const router = useRouter()
  const [isLoading, setIsLoading] = useState(true)
  const [isSubmitting, setIsSubmitting] = useState(false)
  const [isDeleting, setIsDeleting] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const [request, setRequest] = useState<MaintenanceRequestWithDetails | null>(null)
  const [title, setTitle] = useState('')
  const [description, setDescription] = useState('')
  const [priority, setPriority] = useState<MaintenancePriority>('medium')
  const [status, setStatus] = useState<MaintenanceStatus>('pending')
  const [houses, setHouses] = useState<{ id: string, name: string }[]>([])
  const [houseId, setHouseId] = useState('')
  const supabase = createClientComponentClient()

  useEffect(() => {
    async function fetchData() {
      try {
        // Fetch request
        const { data: request, error: requestError } = await supabase
          .from('maintenance_requests')
          .select(`
            *,
            house:houses!maintenance_requests_house_id_fkey(id, name),
            reported_by_user:profiles!maintenance_requests_reported_by_fkey(email),
            visits:maintenance_visits(
              id,
              scheduled_date,
              estimated_duration,
              notes,
              completed_at
            )
          `)
          .eq('id', params.id)
          .single()

        if (requestError) throw requestError
        if (!request) throw new Error('Request not found')

        // Fetch houses
        const { data: houses, error: housesError } = await supabase
          .from('houses')
          .select('id, name')
          .order('name')

        if (housesError) throw housesError

        setRequest(request)
        setTitle(request.title)
        setDescription(request.description)
        setPriority(request.priority)
        setStatus(request.status)
        setHouseId(request.house_id)
        setHouses(houses || [])
      } catch (err) {
        console.error('Error fetching data:', err)
        setError('Failed to load request')
      } finally {
        setIsLoading(false)
      }
    }

    fetchData()
  }, [params.id, supabase])

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setIsSubmitting(true)
    setError(null)

    try {
      const { error: updateError } = await supabase
        .from('maintenance_requests')
        .update({
          title,
          description,
          priority,
          status,
          house_id: houseId
        })
        .eq('id', params.id)

      if (updateError) throw updateError

      router.push(`/maintenance/${params.id}`)
    } catch (err) {
      console.error('Error updating request:', err)
      setError('Failed to update request')
    } finally {
      setIsSubmitting(false)
    }
  }

  const handleDelete = async () => {
    if (!window.confirm('Are you sure you want to delete this maintenance request? This action cannot be undone.')) {
      return
    }

    setIsDeleting(true)
    setError(null)

    try {
      // First delete all visits
      const { error: visitsError } = await supabase
        .from('maintenance_visits')
        .delete()
        .eq('request_id', params.id)

      if (visitsError) throw visitsError

      // Then delete all comments
      const { error: commentsError } = await supabase
        .from('maintenance_comments')
        .delete()
        .eq('request_id', params.id)

      if (commentsError) throw commentsError

      // Finally delete the request
      const { error: deleteError } = await supabase
        .from('maintenance_requests')
        .delete()
        .eq('id', params.id)

      if (deleteError) throw deleteError

      router.push('/maintenance')
    } catch (err) {
      console.error('Error deleting request:', err)
      setError('Failed to delete request')
      setIsDeleting(false)
    }
  }

  if (isLoading) {
    return <div className="p-4">Loading...</div>
  }

  if (error) {
    return <div className="p-4 text-red-600">{error}</div>
  }

  return (
    <div className="px-4 sm:px-6 lg:px-8 py-8 w-full max-w-9xl mx-auto">
      <div className="mb-8 flex justify-between items-center">
        <div>
          <Link
            href={`/maintenance/${params.id}`}
            className="text-sm font-medium text-coop-600 hover:text-coop-700"
          >
            ← Back to Property Visit
          </Link>
          <h1 className="text-2xl font-bold mt-2">Edit Property Visit</h1>
        </div>
        <Button
          onClick={handleDelete}
          disabled={isDeleting}
          variant="destructive"
        >
          {isDeleting ? 'Deleting...' : 'Delete Request'}
        </Button>
      </div>

      <div className="bg-white dark:bg-slate-800 shadow-lg rounded-sm border border-slate-200 dark:border-slate-700 p-6">
        <form onSubmit={handleSubmit} className="space-y-4">
          <div>
            <label htmlFor="title" className="block text-sm font-medium text-slate-700 dark:text-slate-300">
              Title
            </label>
            <input
              type="text"
              id="title"
              value={title}
              onChange={(e) => setTitle(e.target.value)}
              required
              className="mt-1 block w-full rounded-md border border-slate-300 dark:border-slate-600 bg-white dark:bg-slate-700 px-3 py-2 text-sm text-slate-900 dark:text-slate-100 focus:border-coop-500 focus:outline-none focus:ring-1 focus:ring-coop-500"
            />
          </div>

          <div>
            <label htmlFor="description" className="block text-sm font-medium text-slate-700 dark:text-slate-300">
              Description
            </label>
            <textarea
              id="description"
              value={description}
              onChange={(e) => setDescription(e.target.value)}
              required
              rows={3}
              className="mt-1 block w-full rounded-md border border-slate-300 dark:border-slate-600 bg-white dark:bg-slate-700 px-3 py-2 text-sm text-slate-900 dark:text-slate-100 focus:border-coop-500 focus:outline-none focus:ring-1 focus:ring-coop-500"
            />
          </div>

          <div>
            <label htmlFor="house_id" className="block text-sm font-medium text-slate-700 dark:text-slate-300">
              House
            </label>
            <select
              id="house_id"
              value={houseId}
              onChange={(e) => setHouseId(e.target.value)}
              required
              className="mt-1 block w-full rounded-md border border-slate-300 dark:border-slate-600 bg-white dark:bg-slate-700 px-3 py-2 text-sm text-slate-900 dark:text-slate-100 focus:border-coop-500 focus:outline-none focus:ring-1 focus:ring-coop-500"
            >
              {houses.map((house) => (
                <option key={house.id} value={house.id}>
                  {house.name}
                </option>
              ))}
            </select>
          </div>

          <div>
            <label htmlFor="priority" className="block text-sm font-medium text-slate-700 dark:text-slate-300">
              Priority
            </label>
            <select
              id="priority"
              value={priority}
              onChange={(e) => setPriority(e.target.value as MaintenancePriority)}
              required
              className="mt-1 block w-full rounded-md border border-slate-300 dark:border-slate-600 bg-white dark:bg-slate-700 px-3 py-2 text-sm text-slate-900 dark:text-slate-100 focus:border-coop-500 focus:outline-none focus:ring-1 focus:ring-coop-500"
            >
              <option value="low">Low</option>
              <option value="medium">Medium</option>
              <option value="high">High</option>
              <option value="urgent">Urgent</option>
            </select>
          </div>

          <div>
            <label htmlFor="status" className="block text-sm font-medium text-slate-700 dark:text-slate-300">
              Status
            </label>
            <select
              id="status"
              value={status}
              onChange={(e) => setStatus(e.target.value as MaintenanceStatus)}
              required
              className="mt-1 block w-full rounded-md border border-slate-300 dark:border-slate-600 bg-white dark:bg-slate-700 px-3 py-2 text-sm text-slate-900 dark:text-slate-100 focus:border-coop-500 focus:outline-none focus:ring-1 focus:ring-coop-500"
            >
              <option value="pending">Pending</option>
              <option value="scheduled">Scheduled</option>
              <option value="in_progress">In Progress</option>
              <option value="completed">Completed</option>
              <option value="cancelled">Cancelled</option>
            </select>
          </div>

          {request?.visits && request.visits.length > 0 && (
            <div>
              <h3 className="text-sm font-medium text-slate-700 dark:text-slate-300 mb-2">Scheduled Visits</h3>
              <div className="space-y-2">
                {request.visits.map((visit) => (
                  <div 
                    key={visit.id}
                    className="flex items-start p-3 bg-slate-50 dark:bg-slate-900/50 rounded-lg"
                  >
                    <div className="grow">
                      <div className="text-sm font-semibold text-slate-800 dark:text-slate-100 mb-1">
                        {format(new Date(visit.scheduled_date), 'MMM d, yyyy h:mm a')}
                      </div>
                      <div className="text-sm text-slate-600 dark:text-slate-300">
                        Estimated Duration: {visit.estimated_duration}
                      </div>
                      {visit.notes && (
                        <div className="text-sm text-slate-600 dark:text-slate-300 mt-1">
                          Notes: {visit.notes}
                        </div>
                      )}
                    </div>
                    {visit.completed_at && (
                      <span className="inline-flex items-center rounded-full bg-green-100 px-2.5 py-0.5 text-xs font-medium text-green-800">
                        Completed
                      </span>
                    )}
                  </div>
                ))}
              </div>
            </div>
          )}

          <div className="flex justify-end space-x-3">
            <Button
              variant="ghost"
              asChild
            >
              <Link href={`/maintenance/${params.id}`}>
                Cancel
              </Link>
            </Button>
            <Button
              type="submit"
              disabled={isSubmitting}
            >
              {isSubmitting ? 'Saving...' : 'Save Changes'}
            </Button>
          </div>
        </form>
      </div>
    </div>
  )
} 



// Code files extracted from brighton-rock-members/app/(default)/garden
// Generated on 2024-11-30 15:18:19
// Included extensions: .tsx, .ts, .js, .jsx, .css, .scss, .sass, .json, .sql
// Excluded files: package-lock.json, yarn.lock, pnpm-lock.yaml, .DS_Store


================================================================================
// File: garden-area-list.tsx
================================================================================

// app/(default)/garden/garden-area-list.tsx

'use client';

import { useState } from 'react';
import Link from 'next/link';
import { format } from 'date-fns';
import { GardenAreaWithDetails, GardenTaskStatus } from '@/types/garden';
import { Button } from '@/components/ui/button';

interface GardenAreaListProps {
  areas: GardenAreaWithDetails[];
}

export default function GardenAreaList({ areas }: GardenAreaListProps) {
  const [statusFilter, setStatusFilter] = useState<GardenTaskStatus | 'all'>(
    'all'
  );

  const getStatusColor = (status: GardenTaskStatus) => {
    const colors = {
      pending: 'text-yellow-600 dark:text-yellow-400',
      in_progress: 'text-blue-600 dark:text-blue-400',
      completed: 'text-green-600 dark:text-green-400',
      cancelled: 'text-slate-600 dark:text-slate-400',
    };
    return colors[status];
  };

  return (
    <div className="space-y-6">
      {/* Filters */}
      <div className="flex flex-wrap gap-2">
        <Button
          variant={statusFilter === 'all' ? 'default' : 'outline'}
          size="sm"
          onClick={() => setStatusFilter('all')}
        >
          All
        </Button>
        {['pending', 'in_progress', 'completed', 'cancelled'].map((status) => (
          <Button
            key={status}
            variant={statusFilter === status ? 'default' : 'outline'}
            size="sm"
            onClick={() => setStatusFilter(status as GardenTaskStatus)}
          >
            {status.charAt(0).toUpperCase() + status.slice(1).replace('_', ' ')}
          </Button>
        ))}
      </div>

      {/* Garden Areas */}
      {areas.map((area) => {
        const filteredTasks = area.tasks.filter(
          (task) => statusFilter === 'all' || task.status === statusFilter
        );

        if (statusFilter !== 'all' && filteredTasks.length === 0) {
          return null;
        }

        return (
          <div
            key={area.id}
            className="bg-white dark:bg-slate-800 rounded-lg border border-slate-200 dark:border-slate-700"
          >
            {/* Area Header */}
            <div className="px-5 py-4">
              <div className="flex flex-wrap justify-between items-center">
                <h2 className="font-semibold text-slate-800 dark:text-slate-100">
                  {area.name}
                </h2>
                <Link
                  href={`/garden/area/${area.id}`}
                  className="text-sm text-coop-600 hover:text-coop-700 dark:text-coop-400 dark:hover:text-coop-300"
                >
                  View Details →
                </Link>
              </div>
              {area.description && (
                <p className="mt-1 text-sm text-slate-500 dark:text-slate-400">
                  {area.description}
                </p>
              )}
            </div>

            {/* Tasks Table */}
            <div className="overflow-x-auto">
              <table className="table-fixed w-full divide-y divide-slate-200 dark:divide-slate-700">
                {/* Table header */}
                <thead className="text-xs uppercase text-slate-500 dark:text-slate-400 bg-slate-50 dark:bg-slate-900/20">
                  <tr>
                    <th className="w-[40%] px-4 py-3">
                      <div className="font-semibold text-left">Task</div>
                    </th>
                    <th className="w-[20%] px-4 py-3">
                      <div className="font-semibold text-left">Status</div>
                    </th>
                    <th className="w-[20%] px-4 py-3">
                      <div className="font-semibold text-left">Priority</div>
                    </th>
                    <th className="w-[20%] px-4 py-3">
                      <div className="font-semibold text-left">Due Date</div>
                    </th>
                  </tr>
                </thead>
                {/* Table body */}
                <tbody className="divide-y divide-slate-200 dark:divide-slate-700">
                  {filteredTasks.map((task) => (
                    <tr key={task.id}>
                      <td className="px-4 py-3 align-middle">
                        <Link
                          href={`/garden/task/${task.id}`}
                          className="text-coop-600 hover:text-coop-700 dark:text-coop-400 dark:hover:text-coop-300 font-medium"
                        >
                          {task.title}
                        </Link>
                      </td>
                      <td className="px-4 py-3 align-middle">
                        <div
                          className={`inline-flex font-medium ${getStatusColor(
                            task.status
                          )}`}
                        >
                          {task.status.charAt(0).toUpperCase() +
                            task.status.slice(1).replace('_', ' ')}
                        </div>
                      </td>
                      <td className="px-4 py-3 align-middle">
                        <div className="text-slate-800 dark:text-slate-100">
                          {task.priority.charAt(0).toUpperCase() +
                            task.priority.slice(1)}
                        </div>
                      </td>
                      <td className="px-4 py-3 align-middle">
                        <div className="text-slate-800 dark:text-slate-100">
                          {task.due_date
                            ? format(new Date(task.due_date), 'MMM d, yyyy')
                            : '-'}
                        </div>
                      </td>
                    </tr>
                  ))}
                  {filteredTasks.length === 0 && (
                    <tr>
                      <td
                        colSpan={4}
                        className="px-4 py-8 text-center text-slate-500 dark:text-slate-400"
                      >
                        No tasks found
                      </td>
                    </tr>
                  )}
                </tbody>
              </table>
            </div>

            {/* Plants Summary */}
            {area.plants.length > 0 && (
              <div className="px-5 py-3 border-t border-slate-200 dark:border-slate-700">
                <div className="text-sm text-slate-500 dark:text-slate-400">
                  <span className="font-medium text-slate-600 dark:text-slate-300">
                    {area.plants.length} plant
                    {area.plants.length !== 1 ? 's' : ''}
                  </span>{' '}
                  in this area
                </div>
              </div>
            )}
          </div>
        );
      })}
    </div>
  );
}



================================================================================
// File: garden-header.tsx
================================================================================

// app/(default)/garden/garden-header.tsx

'use client';

import NewGardenTaskModal from './new-garden-task-modal';

export default function GardenHeader() {
  return (
    <div className="sm:flex sm:justify-between sm:items-center mb-8">
      {/* Left: Title */}
      <div className="mb-4 sm:mb-0">
        <h1 className="text-2xl md:text-3xl text-slate-800 dark:text-slate-100 font-bold">
          Garden 🌱
        </h1>
      </div>

      {/* Right: Actions */}
      <div className="grid grid-flow-col sm:auto-cols-max justify-start sm:justify-end gap-2">
        <NewGardenTaskModal />
      </div>
    </div>
  );
}



================================================================================
// File: new-garden-task-modal.tsx
================================================================================

// // app/(default)/garden/new-garden-task-modal.tsx

// 'use client';

// import { useState } from 'react';
// import { useRouter } from 'next/navigation';
// import { createClientComponentClient } from '@supabase/auth-helpers-nextjs';
// import {
//   Dialog,
//   DialogContent,
//   DialogHeader,
//   DialogTitle,
// } from '@/components/ui/dialog';
// import { Button } from '@/components/ui/button';
// import { Input } from '@/components/ui/input';
// import { Textarea } from '@/components/ui/textarea';
// import { Label } from '@/components/ui/label';
// import { GardenTaskPriority } from '@/types/garden';
// import { Plus } from 'lucide-react';
// import { createGardenTaskEvent } from '@/lib/actions/calendar';

// export default function NewGardenTaskModal() {
//   const router = useRouter();
//   const [isOpen, setIsOpen] = useState(false);
//   const [isSubmitting, setIsSubmitting] = useState(false);
//   const [error, setError] = useState<string | null>(null);
//   const [areas, setAreas] = useState<{ id: string; name: string }[]>([]);
//   const supabase = createClientComponentClient();

//   const fetchAreas = async () => {
//     const { data, error } = await supabase
//       .from('garden_areas')
//       .select('id, name')
//       .order('name');

//     if (error) {
//       console.error('Error fetching areas:', error);
//       return;
//     }

//     setAreas(data || []);
//   };

//   const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
//     e.preventDefault();
//     setIsSubmitting(true);
//     setError(null);

//     try {
//       const formData = new FormData(e.currentTarget);
      
//       // Get current user
//       const { data: { user }, error: userError } = await supabase.auth.getUser();
//       if (userError || !user) throw new Error('User not authenticated');

//       // Get user's profile
//       const { data: profile, error: profileError } = await supabase
//         .from('profiles')
//         .select('email, full_name')
//         .eq('id', user.id)
//         .single();
//       if (profileError) throw profileError;

//       // Insert garden task
//       const { data: newTask, error: insertError } = await supabase
//         .from('garden_tasks')
//         .insert({
//           title: formData.get('title') as string,
//           description: formData.get('description') as string,
//           area_id: formData.get('area_id') as string,
//           priority: formData.get('priority') as GardenTaskPriority,
//           due_date: (formData.get('due_date') as string) || null,
//           scheduled_time: (formData.get('scheduled_time') as string) || null,
//           assigned_to: (formData.get('assigned_to') as string) || 'Everyone',
//           status: 'pending'
//         })
//         .select()
//         .single();

//       if (insertError) throw insertError;

//       // Create calendar event if due date is set
//       if (formData.get('due_date') && newTask) {
//         await createGardenTaskEvent(
//           newTask.title,
//           newTask.description,
//           newTask.due_date,
//           newTask.scheduled_time,
//           user.id,
//           profile.full_name,
//           newTask.id
//         );
//       }

//       router.refresh();
//       setIsOpen(false);
//     } catch (error) {
//       console.error('Error creating task:', error);
//       setError(
//         error instanceof Error ? error.message : 'Failed to create task'
//       );
//     } finally {
//       setIsSubmitting(false);
//     }
//   };

//   return (
//     <>
//       <Button
//         onClick={() => {
//           setIsOpen(true);
//           fetchAreas();
//         }}
//         variant="default"
//       >
//         <Plus className="h-4 w-4 mr-2" />
//         Add Task
//       </Button>

//       <Dialog open={isOpen} onOpenChange={setIsOpen}>
//         <DialogContent>
//           <DialogHeader>
//             <DialogTitle>New Garden Task</DialogTitle>
//           </DialogHeader>

//           {error && (
//             <div className="bg-red-50 dark:bg-red-900/50 text-red-600 dark:text-red-200 p-3 rounded-md text-sm">
//               {error}
//             </div>
//           )}

//           <form onSubmit={handleSubmit} className="space-y-4">
//             <div>
//               <Label htmlFor="title">Title</Label>
//               <Input
//                 id="title"
//                 name="title"
//                 required
//                 placeholder="Enter task title"
//               />
//             </div>

//             <div>
//               <Label htmlFor="description">Description</Label>
//               <Textarea
//                 id="description"
//                 name="description"
//                 required
//                 placeholder="Enter task description"
//                 className="min-h-[100px] "
//               />
//             </div>

//             <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
//               <div>
//                 <Label htmlFor="area_id">Area</Label>
//                 <select
//                   id="area_id"
//                   name="area_id"
//                   required
//                   className="w-full h-10 rounded-md border border-slate-200 dark:border-slate-700 bg-white dark:bg-slate-900 px-3 py-2"
//                 >
//                   <option value="">Select an area</option>
//                   {areas.map((area) => (
//                     <option key={area.id} value={area.id}>
//                       {area.name}
//                     </option>
//                   ))}
//                 </select>
//               </div>

//               <div>
//                 <Label htmlFor="priority">Priority</Label>
//                 <select
//                   id="priority"
//                   name="priority"
//                   required
//                   defaultValue="medium"
//                   className="w-full h-10 rounded-md border border-slate-200 dark:border-slate-700 bg-white dark:bg-slate-900 px-3 py-2"
//                 >
//                   <option value="low">Low</option>
//                   <option value="medium">Medium</option>
//                   <option value="high">High</option>
//                   <option value="urgent">Urgent</option>
//                 </select>
//               </div>

//               <div>
//                 <Label htmlFor="assigned_to">Assigned To</Label>
//                 <Input
//                   id="assigned_to"
//                   name="assigned_to"
//                   placeholder="Enter any name"
//                   defaultValue="Everyone"
//                 />
//               </div>

//               <div>
//                 <Label htmlFor="due_date">Date</Label>
//                 <Input type="date" id="due_date" name="due_date" />
//               </div>

//               <div>
//                 <Label htmlFor="scheduled_time">Time</Label>
//                 <Input type="time" id="scheduled_time" name="scheduled_time" />
//               </div>
//             </div>

//             <div className="flex justify-end space-x-2">
//               <Button
//                 type="button"
//                 variant="outline"
//                 onClick={() => setIsOpen(false)}
//                 disabled={isSubmitting}
//               >
//                 Cancel
//               </Button>
//               <Button type="submit" disabled={isSubmitting}>
//                 {isSubmitting ? 'Creating...' : 'Create Task'}
//               </Button>
//             </div>
//           </form>
//         </DialogContent>
//       </Dialog>
//     </>
//   );
// }


// app/(default)/garden/new-garden-task-modal.tsx

'use client';

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { GardenTaskPriority } from '@/types/garden';
import { Plus } from 'lucide-react';
import { createGardenTaskEvent } from '@/lib/actions/calendar';

export default function NewGardenTaskModal() {
  const router = useRouter();
  const [isOpen, setIsOpen] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [areas, setAreas] = useState<{ id: string; name: string }[]>([]);
  const supabase = createClientComponentClient();

  const fetchAreas = async () => {
    const { data, error } = await supabase
      .from('garden_areas')
      .select('id, name')
      .order('name');

    if (error) {
      console.error('Error fetching areas:', error);
      return;
    }

    setAreas(data || []);
  };

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    setIsSubmitting(true);
    setError(null);

    try {
      const formData = new FormData(e.currentTarget);

      // Get current user
      const {
        data: { user },
        error: userError,
      } = await supabase.auth.getUser();
      if (userError || !user) throw new Error('User not authenticated');

      // Get user's profile
      const { data: profile, error: profileError } = await supabase
        .from('profiles')
        .select('email, full_name')
        .eq('id', user.id)
        .single();
      if (profileError) throw profileError;

      // Prepare duration
      const durationValue = formData.get('duration') as string;
      let durationInterval: string | null = null;
      if (durationValue) {
        if (durationValue === '24') {
          durationInterval = '24 hours';
        } else {
          durationInterval = `${durationValue} hours`;
        }
      }

      // Insert garden task
      const { data: newTask, error: insertError } = await supabase
        .from('garden_tasks')
        .insert({
          title: formData.get('title') as string,
          description: formData.get('description') as string,
          area_id: formData.get('area_id') as string,
          priority: formData.get('priority') as GardenTaskPriority,
          due_date: (formData.get('due_date') as string) || null,
          scheduled_time: (formData.get('scheduled_time') as string) || null,
          assigned_to: (formData.get('assigned_to') as string) || 'Everyone',
          status: 'pending',
          duration: durationInterval,
        })
        .select()
        .single();

      if (insertError) throw insertError;

      // Create calendar event if due date is set
      if (formData.get('due_date') && newTask) {
        await createGardenTaskEvent(
          newTask.title,
          newTask.description,
          newTask.due_date,
          newTask.scheduled_time,
          durationValue,
          user.id,
          profile.full_name,
          newTask.id
        );
      }

      router.refresh();
      setIsOpen(false);
    } catch (error) {
      console.error('Error creating task:', error);
      setError(
        error instanceof Error ? error.message : 'Failed to create task'
      );
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <>
      <Button
        onClick={() => {
          setIsOpen(true);
          fetchAreas();
        }}
        variant="default"
      >
        <Plus className="h-4 w-4 mr-2" />
        Add Task
      </Button>

      <Dialog open={isOpen} onOpenChange={setIsOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>New Garden Task</DialogTitle>
          </DialogHeader>

          {error && (
            <div className="bg-red-50 dark:bg-red-900/50 text-red-600 dark:text-red-200 p-3 rounded-md text-sm">
              {error}
            </div>
          )}

          <form onSubmit={handleSubmit} className="space-y-4">
            <div>
              <Label htmlFor="title">Title</Label>
              <Input
                id="title"
                name="title"
                required
                placeholder="Enter task title"
              />
            </div>

            <div>
              <Label htmlFor="description">Description</Label>
              <Textarea
                id="description"
                name="description"
                required
                placeholder="Enter task description"
                className="min-h-[100px] "
              />
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <Label htmlFor="area_id">Area</Label>
                <select
                  id="area_id"
                  name="area_id"
                  required
                  className="w-full h-10 rounded-md border border-slate-200 dark:border-slate-700 bg-white dark:bg-slate-900 px-3 py-2"
                >
                  <option value="">Select an area</option>
                  {areas.map((area) => (
                    <option key={area.id} value={area.id}>
                      {area.name}
                    </option>
                  ))}
                </select>
              </div>

              <div>
                <Label htmlFor="priority">Priority</Label>
                <select
                  id="priority"
                  name="priority"
                  required
                  defaultValue="medium"
                  className="w-full h-10 rounded-md border border-slate-200 dark:border-slate-700 bg-white dark:bg-slate-900 px-3 py-2"
                >
                  <option value="low">Low</option>
                  <option value="medium">Medium</option>
                  <option value="high">High</option>
                  <option value="urgent">Urgent</option>
                </select>
              </div>

              <div>
                <Label htmlFor="assigned_to">Assigned To</Label>
                <Input
                  id="assigned_to"
                  name="assigned_to"
                  placeholder="Enter any name"
                  defaultValue="Everyone"
                />
              </div>

              <div>
                <Label htmlFor="due_date">Date</Label>
                <Input type="date" id="due_date" name="due_date" />
              </div>

              <div>
                <Label htmlFor="scheduled_time">Time</Label>
                <Input type="time" id="scheduled_time" name="scheduled_time" />
              </div>

              {/* Duration Field */}
              <div>
                <Label htmlFor="duration">Duration</Label>
                <select
                  id="duration"
                  name="duration"
                  className="w-full h-10 rounded-md border border-slate-200 dark:border-slate-700 bg-white dark:bg-slate-900 px-3 py-2"
                >
                  <option value="">Select duration</option>
                  <option value="0.5">Half an hour</option>
                  <option value="1">1 hour</option>
                  <option value="2">2 hours</option>
                  <option value="3">3 hours</option>
                  <option value="4">4 hours</option>
                  <option value="24">All day</option>
                </select>
              </div>
            </div>

            <div className="flex justify-end space-x-2">
              <Button
                type="button"
                variant="outline"
                onClick={() => setIsOpen(false)}
                disabled={isSubmitting}
              >
                Cancel
              </Button>
              <Button type="submit" disabled={isSubmitting}>
                {isSubmitting ? 'Creating...' : 'Create Task'}
              </Button>
            </div>
          </form>
        </DialogContent>
      </Dialog>
    </>
  );
}



================================================================================
// File: page.tsx
================================================================================

// app/(default)/garden/page.tsx

import { Metadata } from 'next';
import GardenHeader from './garden-header';
import GardenAreaList from './garden-area-list';
import { GardenAreaWithDetails } from '@/types/garden';
import supabaseAdmin from '@/lib/supabaseAdmin';

export const metadata: Metadata = {
  title: 'Garden - Co-op Management',
  description: 'Manage garden areas, tasks, and plants',
};

// Force dynamic rendering to ensure fresh data
export const dynamic = 'force-dynamic';
export const revalidate = 0;

async function getGardenAreas() {
  try {
    const { data: areas, error } = await supabaseAdmin
      .from('garden_areas')
      .select(
        `
        *,
        tasks:garden_tasks(
          *,
          comments:garden_comments(*)
        ),
        plants:garden_plants(*)
      `
      )
      .order('created_at', { ascending: false });

    if (error) {
      console.error('Error fetching garden areas:', error);
      return [];
    }

    return areas as GardenAreaWithDetails[];
  } catch (err) {
    console.error('Error fetching garden areas:', err);
    return [];
  }
}

export default async function GardenPage() {
  const areas = await getGardenAreas();

  return (
    <div className="px-4 sm:px-6 lg:px-8 py-8 w-full max-w-9xl mx-auto">
      <GardenHeader />
      <GardenAreaList areas={areas} />
    </div>
  );
}



================================================================================
// File: task/[id]/comment-section.tsx
================================================================================

// app/(default)/garden/task/[id]/comment-section.tsx

'use client';

import { useState, useEffect } from 'react';
import { format } from 'date-fns';
import { useRouter } from 'next/navigation';
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs';
import { GardenTaskWithDetails } from '@/types/garden';

interface CommentSectionProps {
  task: GardenTaskWithDetails;
}

export default function CommentSection({ task }: CommentSectionProps) {
  const router = useRouter();
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [editingComment, setEditingComment] = useState<string | null>(null);
  const [currentUserId, setCurrentUserId] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);
  const supabase = createClientComponentClient();

  useEffect(() => {
    async function getCurrentUser() {
      const {
        data: { user },
        error: authError,
      } = await supabase.auth.getUser();
      if (authError) {
        console.error('Error fetching user:', authError);
        return;
      }
      setCurrentUserId(user?.id || null);
    }
    getCurrentUser();
  }, [supabase]);

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    if (isSubmitting) return;

    setIsSubmitting(true);
    setError(null);
    const form = e.currentTarget;
    const formData = new FormData(form);
    const commentText = formData.get('comment') as string;

    try {
      const {
        data: { user },
      } = await supabase.auth.getUser();
      if (!user) {
        setError('You must be logged in to comment');
        return;
      }

      // Add the comment
      const { error: insertError } = await supabase
        .from('garden_comments')
        .insert({
          task_id: task.id,
          user_id: user.id,
          comment: commentText,
        });

      if (insertError) {
        console.error('Error adding comment:', insertError);
        setError('Failed to add comment. Please try again.');
        return;
      }

      form.reset();
      router.refresh();
    } catch (err) {
      console.error('Error adding comment:', err);
      setError('Failed to add comment. Please try again.');
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleCommentUpdate = async (
    commentId: string,
    e: React.FormEvent<HTMLFormElement>
  ) => {
    e.preventDefault();
    if (isSubmitting) return;

    setIsSubmitting(true);
    setError(null);
    const form = e.currentTarget;
    const formData = new FormData(form);
    const commentText = formData.get('comment') as string;

    try {
      // Update the comment
      const { error: updateError } = await supabase
        .from('garden_comments')
        .update({ comment: commentText })
        .eq('id', commentId)
        .eq('user_id', currentUserId);

      if (updateError) {
        console.error('Error updating comment:', updateError);
        setError('Failed to update comment. Please try again.');
        return;
      }

      setEditingComment(null);
      router.refresh();
    } catch (err) {
      console.error('Error updating comment:', err);
      setError('Failed to update comment. Please try again.');
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleCommentDelete = async (commentId: string) => {
    if (!window.confirm('Are you sure you want to delete this comment?')) {
      return;
    }

    setError(null);
    try {
      const { error: deleteError } = await supabase
        .from('garden_comments')
        .delete()
        .eq('id', commentId)
        .eq('user_id', currentUserId);

      if (deleteError) {
        console.error('Error deleting comment:', deleteError);
        setError('Failed to delete comment. Please try again.');
        return;
      }

      router.refresh();
    } catch (err) {
      console.error('Error deleting comment:', err);
      setError('Failed to delete comment. Please try again.');
    }
  };

  const sortedComments = [...task.comments].sort(
    (a, b) =>
      new Date(a.created_at).getTime() - new Date(b.created_at).getTime()
  );

  return (
    <div className="bg-white dark:bg-slate-800 border border-slate-200 dark:border-slate-700 rounded-lg">
      <div className="px-5 py-4">
        <h2 className="font-semibold text-slate-800 dark:text-slate-100 mb-4">
          Comments
        </h2>

        {/* Comment List */}
        <div className="space-y-4 mb-6">
          {error && (
            <div className="rounded-lg bg-red-50 dark:bg-red-900/50 p-4 mb-4">
              <p className="text-sm text-red-700 dark:text-red-200">{error}</p>
            </div>
          )}

          {sortedComments.map((comment) => (
            <div
              key={comment.id}
              className="flex space-x-3 p-3 bg-slate-50 dark:bg-slate-900/50 rounded-lg"
            >
              <div className="flex-shrink-0">
                <div className="w-8 h-8 rounded-full bg-coop-600 flex items-center justify-center">
                  <span className="text-sm font-medium text-white">
                    {comment.user?.full_name?.charAt(0).toUpperCase() || comment.user?.email?.charAt(0).toUpperCase() || '?'}
                  </span>
                </div>
              </div>
              <div className="flex-grow">
                {editingComment === comment.id ? (
                  <form
                    onSubmit={(e) => handleCommentUpdate(comment.id, e)}
                    className="space-y-2"
                  >
                    <textarea
                      name="comment"
                      defaultValue={comment.comment}
                      required
                      rows={2}
                      className="block w-full rounded-lg border border-slate-300 dark:border-slate-600 bg-white dark:bg-slate-700 px-3 py-2 text-sm text-slate-900 dark:text-slate-100"
                    />
                    <div className="flex justify-end space-x-2">
                      <button
                        type="button"
                        onClick={() => setEditingComment(null)}
                        className="text-sm font-medium text-slate-600 hover:text-slate-800 dark:text-slate-400 dark:hover:text-slate-200"
                      >
                        Cancel
                      </button>
                      <button
                        type="submit"
                        disabled={isSubmitting}
                        className="text-sm font-medium text-coop-600 hover:text-coop-700 dark:text-coop-400 dark:hover:text-coop-300"
                      >
                        Save
                      </button>
                    </div>
                  </form>
                ) : (
                  <>
                    <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-1">
                      <div className="text-sm font-medium text-slate-800 dark:text-slate-100">
                        {comment.user?.full_name || comment.user?.email || 'Unknown User'}
                      </div>
                      <div className="text-xs text-slate-500 dark:text-slate-400">
                        {format(new Date(comment.created_at), 'MMM d, yyyy h:mm a')}
                      </div>
                    </div>
                    <div className="text-sm text-slate-600 dark:text-slate-300 whitespace-pre-wrap">
                      {comment.comment}
                    </div>
                    {currentUserId === comment.user_id && (
                      <div className="mt-2 flex space-x-2">
                        <button
                          onClick={() => setEditingComment(comment.id)}
                          className="text-sm font-medium text-coop-600 hover:text-coop-700 dark:text-coop-400 dark:hover:text-coop-300"
                        >
                          Edit
                        </button>
                        <button
                          onClick={() => handleCommentDelete(comment.id)}
                          className="text-sm font-medium text-red-600 hover:text-red-700 dark:text-red-400 dark:hover:text-red-300"
                        >
                          Delete
                        </button>
                      </div>
                    )}
                  </>
                )}
              </div>
            </div>
          ))}
          {task.comments.length === 0 && (
            <div className="text-sm text-slate-500 dark:text-slate-400 text-center py-4">
              No comments yet
            </div>
          )}
        </div>

        {/* Comment Form */}
        <form onSubmit={handleSubmit} className="space-y-4">
          <div>
            <label htmlFor="comment" className="sr-only">
              Add a comment
            </label>
            <textarea
              name="comment"
              id="comment"
              rows={3}
              required
              className="mt-1 block w-full rounded-lg border border-slate-300 dark:border-slate-600 bg-white dark:bg-slate-700 px-3 py-2 text-sm text-slate-900 dark:text-slate-100 placeholder-slate-400 focus:border-coop-500 focus:outline-none focus:ring-1 focus:ring-coop-500"
              placeholder="Add a comment..."
            />
          </div>

          <div className="flex justify-end">
            <button
              type="submit"
              disabled={isSubmitting}
              className="rounded-lg bg-coop-600 px-3 py-2 text-sm font-semibold text-white hover:bg-coop-700 dark:bg-coop-500 dark:hover:bg-coop-600 focus:outline-none focus:ring-2 focus:ring-coop-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {isSubmitting ? 'Adding...' : 'Add Comment'}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}



================================================================================
// File: task/[id]/page.tsx
================================================================================

// app/(default)/garden/task/[id]/page.tsx

import { Metadata } from 'next';
import { notFound } from 'next/navigation';
import supabaseAdmin from '@/lib/supabaseAdmin';
import { GardenTaskWithDetails } from '@/types/garden';
import TaskHeader from './task-header';
import TaskDetails from './task-details';
import CommentSection from './comment-section';

export const metadata: Metadata = {
  title: 'Garden Task - Co-op Management',
  description: 'View and manage Garden Task details',
};

// Force dynamic rendering to ensure fresh data
export const dynamic = 'force-dynamic';
export const revalidate = 0;

async function getGardenTask(id: string) {
  try {
    const { data: task, error } = await supabaseAdmin
      .from('garden_tasks')
      .select(
        `
    *,
    area:garden_areas!garden_tasks_area_id_fkey(
      id,
      name,
      description
    ),
    comments:garden_comments(
      *,
      user:profiles!garden_comments_user_id_fkey(
        email,
        full_name
      )
    )
  `
      )
      .eq('id', id)
      .order('created_at', { foreignTable: 'garden_comments', ascending: true })
      .single();

    if (error) {
      if (error.code === 'PGRST116') {
        return null;
      }
      throw error;
    }

    return task as GardenTaskWithDetails;
  } catch (err) {
    console.error('Error fetching Garden Task:', err);
    return null;
  }
}

interface GardenTaskPageProps {
  params: {
    id: string;
  };
}

export default async function GardenTaskPage({ params }: GardenTaskPageProps) {
  const task = await getGardenTask(params.id);

  if (!task) {
    notFound();
  }

  return (
    <div className="px-4 sm:px-6 lg:px-8 py-8 w-full max-w-9xl mx-auto">
      <TaskHeader task={task} />

      <div className="grid grid-cols-1 xl:grid-cols-3 gap-6 mt-6">
        {/* Left column - Task details and comments */}
        <div className="xl:col-span-2 space-y-6">
          <TaskDetails task={task} />
          <CommentSection task={task} />
        </div>
      </div>
    </div>
  );
}



================================================================================
// File: task/[id]/task-actions.tsx
================================================================================

// // app/(default)/garden/task/[id]/task-actions.tsx

// 'use client';

// import { useState, useEffect } from 'react';
// import { useRouter } from 'next/navigation';
// import { createClientComponentClient } from '@supabase/auth-helpers-nextjs';
// import { GardenTaskPriority, GardenTaskStatus, GardenTaskWithDetails } from '@/types/garden';
// import {
//   Dialog,
//   DialogContent,
//   DialogHeader,
//   DialogTitle,
// } from '@/components/ui/dialog';
// import { Button } from '@/components/ui/button';
// import { Input } from '@/components/ui/input';
// import { Textarea } from '@/components/ui/textarea';
// import { Label } from '@/components/ui/label';
// import { Edit, Trash2 } from 'lucide-react';
// import { createGardenTaskEvent } from '@/lib/actions/calendar';

// interface TaskActionsProps {
//   task: GardenTaskWithDetails;
// }

// export default function TaskActions({ task }: TaskActionsProps) {
//   const router = useRouter();
//   const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);
//   const [isDeleting, setIsDeleting] = useState(false);
//   const [isUpdating, setIsUpdating] = useState(false);
//   const [areas, setAreas] = useState<{ id: string; name: string }[]>([]);
//   const [error, setError] = useState<string | null>(null);
//   const supabase = createClientComponentClient();

//   const fetchAreas = async () => {
//     const { data, error } = await supabase
//       .from('garden_areas')
//       .select('id, name')
//       .order('name');

//     if (error) {
//       console.error('Error fetching areas:', error);
//       return;
//     }

//     setAreas(data || []);
//   };

//   useEffect(() => {
//     fetchAreas();
//   }, []);

//   const handleEdit = async (e: React.FormEvent<HTMLFormElement>) => {
//     e.preventDefault();
//     try {
//       setIsUpdating(true);
//       setError(null);
//       const formData = new FormData(e.currentTarget);

//       // Get current user
//       const { data: { user }, error: userError } = await supabase.auth.getUser();
//       if (userError || !user) throw new Error('User not authenticated');

//       // Get user's profile
//       const { data: profile, error: profileError } = await supabase
//         .from('profiles')
//         .select('full_name')
//         .eq('id', user.id)
//         .single();
//       if (profileError) throw profileError;

//       // Update garden task
//       const { data: updatedTask, error: updateError } = await supabase
//         .from('garden_tasks')
//         .update({
//           title: formData.get('title') as string,
//           description: formData.get('description') as string,
//           area_id: formData.get('area_id') as string,
//           priority: formData.get('priority') as GardenTaskPriority,
//           due_date: (formData.get('due_date') as string) || null,
//           scheduled_time: (formData.get('scheduled_time') as string) || null,
//           assigned_to: (formData.get('assigned_to') as string) || 'Everyone',
//           status: formData.get('status') as GardenTaskStatus
//         })
//         .eq('id', task.id)
//         .select()
//         .single();

//       if (updateError) throw updateError;

//       // Handle calendar event
//       if (formData.get('due_date')) {
//         await createGardenTaskEvent(
//           formData.get('title') as string,
//           formData.get('description') as string,
//           formData.get('due_date') as string,
//           formData.get('scheduled_time') as string || null,
//           user.id,
//           profile.full_name,
//           task.id
//         );
//       }

//       setIsEditDialogOpen(false);
//       router.refresh();
//     } catch (error) {
//       console.error('Error updating task:', error);
//       setError(error instanceof Error ? error.message : 'Failed to update task');
//     } finally {
//       setIsUpdating(false);
//     }
//   };

//   const handleDelete = async () => {
//     if (
//       !window.confirm(
//         'Are you sure you want to delete this task? This action cannot be undone.'
//       )
//     ) {
//       return;
//     }

//     try {
//       setIsDeleting(true);

//       // First delete all comments
//       const { error: commentsError } = await supabase
//         .from('garden_comments')
//         .delete()
//         .eq('task_id', task.id);

//       if (commentsError) throw commentsError;

//       // Then delete the task
//       const { error: deleteError } = await supabase
//         .from('garden_tasks')
//         .delete()
//         .eq('id', task.id);

//       if (deleteError) throw deleteError;

//       router.push('/garden');
//     } catch (error) {
//       console.error('Error deleting task:', error);
//     } finally {
//       setIsDeleting(false);
//     }
//   };

//   return (
//     <div className="flex items-center gap-2">
//       {/* Edit Button */}
//       <Button
//         variant="default"
//         size="sm"
//         onClick={() => setIsEditDialogOpen(true)}
//         disabled={isUpdating || isDeleting}
//       >
//         <Edit className="h-4 w-4 mr-1" />
//         Edit Task
//       </Button>

//       {/* Delete Button */}
//       <Button
//         variant="destructive"
//         size="sm"
//         onClick={handleDelete}
//         disabled={isDeleting}
//       >
//         <Trash2 className="h-4 w-4 mr-1" />
//         Delete Task
//       </Button>

//       {/* Edit Dialog */}
//       <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>
//         <DialogContent className="sm:max-w-[600px]">
//           <DialogHeader>
//             <DialogTitle>Edit Task</DialogTitle>
//           </DialogHeader>

//           {error && (
//             <div className="bg-red-50 dark:bg-red-900/50 text-red-600 dark:text-red-200 p-3 rounded-md text-sm">
//               {error}
//             </div>
//           )}

//           <form onSubmit={handleEdit} className="space-y-4">
//             <div>
//               <Label htmlFor="title">Title</Label>
//               <Input
//                 id="title"
//                 name="title"
//                 required
//                 defaultValue={task.title}
//               />
//             </div>

//             <div>
//               <Label htmlFor="description">Description</Label>
//               <Textarea
//                 id="description"
//                 name="description"
//                 required
//                 defaultValue={task.description}
//                 className="min-h-[100px]"
//               />
//             </div>

//             <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
//               <div>
//                 <Label htmlFor="area_id">Area</Label>
//                 <select
//                   id="area_id"
//                   name="area_id"
//                   required
//                   defaultValue={task.area_id}
//                   className="w-full h-10 rounded-md border border-slate-200 dark:border-slate-700 bg-white dark:bg-slate-900 px-3 py-2"
//                 >
//                   <option value="">Select an area</option>
//                   {areas.map((area) => (
//                     <option key={area.id} value={area.id}>
//                       {area.name}
//                     </option>
//                   ))}
//                 </select>
//               </div>

//               <div>
//                 <Label htmlFor="priority">Priority</Label>
//                 <select
//                   id="priority"
//                   name="priority"
//                   required
//                   defaultValue={task.priority}
//                   className="w-full h-10 rounded-md border border-slate-200 dark:border-slate-700 bg-white dark:bg-slate-900 px-3 py-2"
//                 >
//                   <option value="low">Low</option>
//                   <option value="medium">Medium</option>
//                   <option value="high">High</option>
//                   <option value="urgent">Urgent</option>
//                 </select>
//               </div>

//               <div>
//                 <Label htmlFor="status">Status</Label>
//                 <select
//                   id="status"
//                   name="status"
//                   required
//                   defaultValue={task.status}
//                   className="w-full h-10 rounded-md border border-slate-200 dark:border-slate-700 bg-white dark:bg-slate-900 px-3 py-2"
//                 >
//                   <option value="pending">Pending</option>
//                   <option value="in_progress">In Progress</option>
//                   <option value="completed">Completed</option>
//                   <option value="cancelled">Cancelled</option>
//                 </select>
//               </div>

//               <div>
//                 <Label htmlFor="assigned_to">Assigned To</Label>
//                 <Input
//                   id="assigned_to"
//                   name="assigned_to"
//                   placeholder="Enter any name"
//                   defaultValue={task.assigned_to || 'Everyone'}
//                 />
//               </div>

//               <div>
//                 <Label htmlFor="due_date">Date</Label>
//                 <Input
//                   type="date"
//                   id="due_date"
//                   name="due_date"
//                   defaultValue={task.due_date ? task.due_date.split('T')[0] : ''}
//                 />
//               </div>

//               <div>
//                 <Label htmlFor="scheduled_time">Time</Label>
//                 <Input
//                   type="time"
//                   id="scheduled_time"
//                   name="scheduled_time"
//                   defaultValue={task.scheduled_time || ''}
//                 />
//               </div>
//             </div>

//             <div className="flex justify-end gap-2">
//               <Button
//                 type="button"
//                 variant="outline"
//                 onClick={() => setIsEditDialogOpen(false)}
//                 disabled={isUpdating}
//               >
//                 Cancel
//               </Button>
//               <Button type="submit" disabled={isUpdating}>
//                 {isUpdating ? 'Saving...' : 'Save Changes'}
//               </Button>
//             </div>
//           </form>
//         </DialogContent>
//       </Dialog>
//     </div>
//   );
// }

// app/(default)/garden/task/[id]/task-actions.tsx

'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs';
import {
  GardenTaskPriority,
  GardenTaskStatus,
  GardenTaskWithDetails,
} from '@/types/garden';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { Edit, Trash2 } from 'lucide-react';
import { createGardenTaskEvent } from '@/lib/actions/calendar';

interface TaskActionsProps {
  task: GardenTaskWithDetails;
}

export default function TaskActions({ task }: TaskActionsProps) {
  const router = useRouter();
  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);
  const [isDeleting, setIsDeleting] = useState(false);
  const [isUpdating, setIsUpdating] = useState(false);
  const [areas, setAreas] = useState<{ id: string; name: string }[]>([]);
  const [error, setError] = useState<string | null>(null);
  const supabase = createClientComponentClient();

  const fetchAreas = async () => {
    const { data, error } = await supabase
      .from('garden_areas')
      .select('id, name')
      .order('name');

    if (error) {
      console.error('Error fetching areas:', error);
      return;
    }

    setAreas(data || []);
  };

  useEffect(() => {
    fetchAreas();
  }, []);

  const handleEdit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    try {
      setIsUpdating(true);
      setError(null);
      const formData = new FormData(e.currentTarget);

      // Get current user
      const {
        data: { user },
        error: userError,
      } = await supabase.auth.getUser();
      if (userError || !user) throw new Error('User not authenticated');

      // Get user's profile
      const { data: profile, error: profileError } = await supabase
        .from('profiles')
        .select('full_name')
        .eq('id', user.id)
        .single();
      if (profileError) throw profileError;

      // Prepare duration
      const durationValue = formData.get('duration') as string;
      let durationInterval: string | null = null;
      if (durationValue) {
        if (durationValue === '24') {
          durationInterval = '24 hours';
        } else {
          durationInterval = `${durationValue} hours`;
        }
      }

      // Update garden task
      const { data: updatedTask, error: updateError } = await supabase
        .from('garden_tasks')
        .update({
          title: formData.get('title') as string,
          description: formData.get('description') as string,
          area_id: formData.get('area_id') as string,
          priority: formData.get('priority') as GardenTaskPriority,
          due_date: (formData.get('due_date') as string) || null,
          scheduled_time: (formData.get('scheduled_time') as string) || null,
          assigned_to: (formData.get('assigned_to') as string) || 'Everyone',
          status: formData.get('status') as GardenTaskStatus,
          duration: durationInterval,
        })
        .eq('id', task.id)
        .select()
        .single();

      if (updateError) throw updateError;

      // Handle calendar event
      if (formData.get('due_date')) {
        await createGardenTaskEvent(
          formData.get('title') as string,
          formData.get('description') as string,
          formData.get('due_date') as string,
          formData.get('scheduled_time') as string || null,
          durationValue,
          user.id,
          profile.full_name,
          task.id
        );
      }

      setIsEditDialogOpen(false);
      router.refresh();
    } catch (error) {
      console.error('Error updating task:', error);
      setError(
        error instanceof Error ? error.message : 'Failed to update task'
      );
    } finally {
      setIsUpdating(false);
    }
  };

  const handleDelete = async () => {
    if (
      !window.confirm(
        'Are you sure you want to delete this task? This action cannot be undone.'
      )
    ) {
      return;
    }

    try {
      setIsDeleting(true);

      // First delete all comments
      const { error: commentsError } = await supabase
        .from('garden_comments')
        .delete()
        .eq('task_id', task.id);

      if (commentsError) throw commentsError;

      // Then delete the task
      const { error: deleteError } = await supabase
        .from('garden_tasks')
        .delete()
        .eq('id', task.id);

      if (deleteError) throw deleteError;

      router.push('/garden');
    } catch (error) {
      console.error('Error deleting task:', error);
    } finally {
      setIsDeleting(false);
    }
  };

  // Helper function to parse duration for default value
  const parseDurationToValue = (duration: string | null): string => {
    if (!duration) return '';
    if (duration === '24 hours') return '24';
    const hoursMatch = duration.match(/([\d.]+)\s*hours?/);
    if (hoursMatch) {
      return hoursMatch[1];
    }
    return '';
  };

  return (
    <div className="flex items-center gap-2">
      {/* Edit Button */}
      <Button
        variant="default"
        size="sm"
        onClick={() => setIsEditDialogOpen(true)}
        disabled={isUpdating || isDeleting}
      >
        <Edit className="h-4 w-4 mr-1" />
        Edit Task
      </Button>

      {/* Delete Button */}
      <Button
        variant="destructive"
        size="sm"
        onClick={handleDelete}
        disabled={isDeleting}
      >
        <Trash2 className="h-4 w-4 mr-1" />
        Delete Task
      </Button>

      {/* Edit Dialog */}
      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>
        <DialogContent className="sm:max-w-[600px]">
          <DialogHeader>
            <DialogTitle>Edit Task</DialogTitle>
          </DialogHeader>

          {error && (
            <div className="bg-red-50 dark:bg-red-900/50 text-red-600 dark:text-red-200 p-3 rounded-md text-sm">
              {error}
            </div>
          )}

          <form onSubmit={handleEdit} className="space-y-4">
            <div>
              <Label htmlFor="title">Title</Label>
              <Input
                id="title"
                name="title"
                required
                defaultValue={task.title}
              />
            </div>

            <div>
              <Label htmlFor="description">Description</Label>
              <Textarea
                id="description"
                name="description"
                required
                defaultValue={task.description}
                className="min-h-[100px]"
              />
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <Label htmlFor="area_id">Area</Label>
                <select
                  id="area_id"
                  name="area_id"
                  required
                  defaultValue={task.area_id}
                  className="w-full h-10 rounded-md border border-slate-200 dark:border-slate-700 bg-white dark:bg-slate-900 px-3 py-2"
                >
                  <option value="">Select an area</option>
                  {areas.map((area) => (
                    <option key={area.id} value={area.id}>
                      {area.name}
                    </option>
                  ))}
                </select>
              </div>

              <div>
                <Label htmlFor="priority">Priority</Label>
                <select
                  id="priority"
                  name="priority"
                  required
                  defaultValue={task.priority}
                  className="w-full h-10 rounded-md border border-slate-200 dark:border-slate-700 bg-white dark:bg-slate-900 px-3 py-2"
                >
                  <option value="low">Low</option>
                  <option value="medium">Medium</option>
                  <option value="high">High</option>
                  <option value="urgent">Urgent</option>
                </select>
              </div>

              <div>
                <Label htmlFor="status">Status</Label>
                <select
                  id="status"
                  name="status"
                  required
                  defaultValue={task.status}
                  className="w-full h-10 rounded-md border border-slate-200 dark:border-slate-700 bg-white dark:bg-slate-900 px-3 py-2"
                >
                  <option value="pending">Pending</option>
                  <option value="in_progress">In Progress</option>
                  <option value="completed">Completed</option>
                  <option value="cancelled">Cancelled</option>
                </select>
              </div>

              <div>
                <Label htmlFor="assigned_to">Assigned To</Label>
                <Input
                  id="assigned_to"
                  name="assigned_to"
                  placeholder="Enter any name"
                  defaultValue={task.assigned_to || 'Everyone'}
                />
              </div>

              <div>
                <Label htmlFor="due_date">Date</Label>
                <Input
                  type="date"
                  id="due_date"
                  name="due_date"
                  defaultValue={
                    task.due_date ? task.due_date.split('T')[0] : ''
                  }
                />
              </div>

              <div>
                <Label htmlFor="scheduled_time">Time</Label>
                <Input
                  type="time"
                  id="scheduled_time"
                  name="scheduled_time"
                  defaultValue={task.scheduled_time || ''}
                />
              </div>

              {/* Duration Field */}
              <div>
                <Label htmlFor="duration">Duration</Label>
                <select
                  id="duration"
                  name="duration"
                  className="w-full h-10 rounded-md border border-slate-200 dark:border-slate-700 bg-white dark:bg-slate-900 px-3 py-2"
                  defaultValue={parseDurationToValue(task.duration)}
                >
                  <option value="">Select duration</option>
                  <option value="0.5">Half an hour</option>
                  <option value="1">1 hour</option>
                  <option value="2">2 hours</option>
                  <option value="3">3 hours</option>
                  <option value="4">4 hours</option>
                  <option value="24">All day</option>
                </select>
              </div>
            </div>

            <div className="flex justify-end gap-2">
              <Button
                type="button"
                variant="outline"
                onClick={() => setIsEditDialogOpen(false)}
                disabled={isUpdating}
              >
                Cancel
              </Button>
              <Button type="submit" disabled={isUpdating}>
                {isUpdating ? 'Saving...' : 'Save Changes'}
              </Button>
            </div>
          </form>
        </DialogContent>
      </Dialog>
    </div>
  );
}



================================================================================
// File: task/[id]/task-details.tsx
================================================================================

// app/(default)/garden/task/[id]/task-details.tsx

'use client';

import { format } from 'date-fns';
import { GardenTaskWithDetails } from '@/types/garden';

interface TaskDetailsProps {
  task: GardenTaskWithDetails;
}

export default function TaskDetails({ task }: TaskDetailsProps) {
  return (
    <div className="bg-white dark:bg-slate-800 rounded-lg border border-slate-200 dark:border-slate-700">
      <div className="px-5 py-4">
        <div className="mb-4">
          <h2 className="font-semibold text-slate-800 dark:text-slate-100">
            Task Details
          </h2>
        </div>

        <div className="space-y-4">
          {/* Description */}
          <div>
            <h3 className="text-sm font-medium text-slate-800 dark:text-slate-100 mb-1">
              Description
            </h3>
            <div className="text-sm text-slate-500 dark:text-slate-400 whitespace-pre-wrap">
              {task.description}
            </div>
          </div>

          {/* Assigned To */}
          <div>
            <h3 className="text-sm font-medium text-slate-800 dark:text-slate-100 mb-1">
              Assigned To
            </h3>
            <div className="text-sm text-slate-500 dark:text-slate-400">
              {task.assigned_to || 'Everyone'}
            </div>
          </div>

          {/* Due Date */}
          {task.due_date && (
            <div>
              <h3 className="text-sm font-medium text-slate-800 dark:text-slate-100 mb-1">
                Due Date
              </h3>
              <div className="text-sm text-slate-500 dark:text-slate-400">
                {format(new Date(task.due_date), 'MMM d, yyyy')}
                {task.scheduled_time && ` at ${task.scheduled_time}`}
              </div>
            </div>
          )}

          {/* Created At */}
          <div>
            <h3 className="text-sm font-medium text-slate-800 dark:text-slate-100 mb-1">
              Created
            </h3>
            <div className="text-sm text-slate-500 dark:text-slate-400">
              {format(new Date(task.created_at), 'MMM d, yyyy h:mm a')}
            </div>
          </div>

          {/* Last Updated */}
          <div>
            <h3 className="text-sm font-medium text-slate-800 dark:text-slate-100 mb-1">
              Last Updated
            </h3>
            <div className="text-sm text-slate-500 dark:text-slate-400">
              {format(new Date(task.updated_at), 'MMM d, yyyy h:mm a')}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}



================================================================================
// File: task/[id]/task-header.tsx
================================================================================

// app/(default)/garden/task/[id]/task-header.tsx

'use client';

import Link from 'next/link';
import { GardenTaskWithDetails } from '@/types/garden';
import TaskActions from './task-actions';

interface TaskHeaderProps {
  task: GardenTaskWithDetails;
}

export default function TaskHeader({ task }: TaskHeaderProps) {
  const getStatusColor = (status: string) => {
    const colors = {
      pending: 'text-yellow-600 dark:text-yellow-400',
      in_progress: 'text-blue-600 dark:text-blue-400',
      completed: 'text-green-600 dark:text-green-400',
      cancelled: 'text-slate-600 dark:text-slate-400',
    };
    return colors[status as keyof typeof colors];
  };

  const getPriorityColor = (priority: string) => {
    const colors = {
      low: 'text-slate-600 dark:text-slate-400',
      medium: 'text-blue-600 dark:text-blue-400',
      high: 'text-orange-600 dark:text-orange-400',
      urgent: 'text-red-600 dark:text-red-400',
    };
    return colors[priority as keyof typeof colors];
  };

  return (
    <div className="mb-8">
      {/* Back button */}
      <div className="mb-4">
        <Link
          href="/garden"
          className="text-sm font-medium text-coop-600 hover:text-coop-700 dark:text-coop-400 dark:hover:text-coop-300"
        >
          ← Back to Garden
        </Link>
      </div>

      <div className="flex flex-wrap gap-4 sm:flex-nowrap sm:justify-between sm:items-center">
        {/* Left: Title and Area */}
        <div>
          <h1 className="text-2xl md:text-3xl text-slate-800 dark:text-slate-100 font-bold mb-2">
            {task.title}
          </h1>
          <div className="text-sm space-y-1">
            <div className="text-slate-500 dark:text-slate-400">
              Area: {task.area.name}
            </div>
          </div>
        </div>

        {/* Right: Status, Priority, and Actions */}
        <div className="flex flex-col items-end gap-2">
          <div className="flex flex-wrap items-center gap-4">
            <div
              className={`inline-flex font-medium ${getStatusColor(
                task.status
              )}`}
            >
              {task.status.charAt(0).toUpperCase() +
                task.status.slice(1).replace('_', ' ')}
            </div>
            <div
              className={`inline-flex font-medium ${getPriorityColor(
                task.priority
              )}`}
            >
              {task.priority.charAt(0).toUpperCase() + task.priority.slice(1)}
            </div>
          </div>
          {/* Task Actions */}
          <TaskActions task={task} />
        </div>
      </div>
    </div>
  );
}

// Code files extracted from brighton-rock-members/lib
// Generated on 2024-11-30 15:19:45
// Included extensions: .tsx, .ts, .js, .jsx, .css, .scss, .sass, .json, .sql
// Excluded files: package-lock.json, yarn.lock, pnpm-lock.yaml, .DS_Store


================================================================================
// File: actions.ts
================================================================================

'use server'

import { cookies } from 'next/headers'
import { redirect } from 'next/navigation'
import { supabase } from '@/lib/supabase'

export async function authenticate(_prevState: string | undefined, formData: FormData) {
  try {
    const email = formData.get('email') as string
    const password = formData.get('password') as string

    if (!email || !password) {
      return 'Email and password are required'
    }

    console.log('Attempting to sign in with email:', email)

    const { data, error } = await supabase.auth.signInWithPassword({
      email,
      password,
    })

    if (error) {
      console.error('Supabase auth error:', error)
      return error.message
    }

    if (!data?.session) {
      console.error('No session returned from Supabase')
      return 'Authentication failed'
    }

    console.log('Sign in successful, setting session cookie')

    // Store the session in an HTTP-only cookie
    cookies().set('session', JSON.stringify(data.session), {
      httpOnly: true,
      secure: process.env.NODE_ENV === 'production',
      sameSite: 'lax',
      maxAge: 60 * 60 * 24 * 7, // 1 week
    })

    // Return success instead of redirecting
    return { success: true }

  } catch (error) {
    console.error('Unexpected error during authentication:', error)
    if (error instanceof Error) {
      return error.message
    }
    return 'An unexpected error occurred during sign in'
  }
} 


================================================================================
// File: supabase.ts
================================================================================

// lib/supabase.ts
import { createClient } from '@supabase/supabase-js'
import { Database } from '@/types/database'

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!

export const supabase = createClient<Database>(supabaseUrl, supabaseAnonKey, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
  },
}) 


================================================================================
// File: supabaseAdmin.ts
================================================================================

// lib/supabaseAdmin.ts

import { createClient } from '@supabase/supabase-js';

// Make sure to set these environment variables in your .env file
const supabaseAdmin = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!
);

export default supabaseAdmin;



================================================================================
// File: utils.ts
================================================================================

import { type ClassValue, clsx } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
} 


================================================================================
// File: actions/calendar.ts
================================================================================

// // app/lib/actions/calendar.ts

// import { createClientComponentClient } from '@supabase/auth-helpers-nextjs';
// import { cookies } from 'next/headers';
// import { CalendarEventWithDetails } from '@/types/calendar';

// export async function getCalendarEvents(
//   startDate: Date,
//   endDate: Date
// ): Promise<CalendarEventWithDetails[]> {
//   const supabase = createClientComponentClient();
  
//   const { data: events, error } = await supabase
//     .from('calendar_events')
//     .select(`
//       *,
//       created_by_user:created_by(email, full_name),
//       last_modified_by_user:last_modified_by(email, full_name),
//       category
//     `)
//     .gte('start_time', startDate.toISOString())
//     .lte('end_time', endDate.toISOString())
//     .order('start_time', { ascending: true });

//   if (error) {
//     console.error('Error fetching calendar events:', error);
//     return [];
//   }

//   // Assign 'Miscellaneous' to events without a category
//   return (events || []).map(event => ({
//     ...event,
//     category: event.category || 'Miscellaneous',
//   }));
// }

// export async function createCalendarEvent(
//   title: string,
//   description: string | null,
//   startTime: Date,
//   endTime: Date,
//   eventType: 'manual' | 'garden_task' = 'manual',
//   userId: string,
//   fullName?: string | null,
//   referenceId?: string
// ) {
//   const supabase = createClientComponentClient();

//   // Delete any existing events for this reference if it's a garden task
//   if (eventType === 'garden_task' && referenceId) {
//     await supabase
//       .from('calendar_events')
//       .delete()
//       .eq('reference_id', referenceId)
//       .eq('event_type', 'garden_task');
//   }
  
//   const { data, error } = await supabase
//     .from('calendar_events')
//     .insert({
//       title,
//       description,
//       start_time: startTime.toISOString(),
//       end_time: endTime.toISOString(),
//       event_type: eventType,
//       created_by: userId,
//       full_name: fullName,
//       reference_id: referenceId,
//       category: eventType === 'garden_task' ? 'Garden Task' : 'Miscellaneous'
//     })
//     .select()
//     .single();

//   if (error) {
//     console.error('Calendar event creation error:', error);
//     throw new Error(`Failed to create calendar event: ${error.message}`);
//   }

//   return data;
// }

// export async function createGardenTaskEvent(
//   title: string,
//   description: string,
//   dueDate: string,
//   scheduledTime: string | null,
//   userId: string,
//   fullName: string | null,
//   taskId: string
// ) {
//   // Create a Date object for the due date
//   const date = new Date(dueDate);
  
//   // If there's a scheduled time, parse and set it
//   if (scheduledTime) {
//     const [hours, minutes] = scheduledTime.split(':');
//     date.setHours(parseInt(hours, 10), parseInt(minutes, 10));
//   } else {
//     // Default to 9 AM if no time specified
//     date.setHours(9, 0);
//   }

//   // End time is 1 hour after start time
//   const endTime = new Date(date);
//   endTime.setHours(endTime.getHours() + 1);

//   // Create single calendar event
//   return createCalendarEvent(
//     title,
//     description,
//     date,
//     endTime,
//     'garden_task',
//     userId,
//     fullName,
//     taskId
//   );
// }

// export async function updateCalendarEvent(
//   eventId: string,
//   updates: Partial<CalendarEventWithDetails>,
//   userId: string
// ) {
//   const supabase = createClientComponentClient();
  
//   const { data, error } = await supabase
//     .from('calendar_events')
//     .update({ ...updates, last_modified_by: userId })
//     .eq('id', eventId)
//     .select()
//     .single();

//   if (error) {
//     throw new Error(`Failed to update calendar event: ${error.message}`);
//   }

//   return data;
// }

// export async function deleteCalendarEvent(eventId: string) {
//   const supabase = createClientComponentClient();
  
//   const { error } = await supabase
//     .from('calendar_events')
//     .delete()
//     .eq('id', eventId);

//   if (error) {
//     throw new Error(`Failed to delete calendar event: ${error.message}`);
//   }
// } 

// app/lib/actions/calendar.ts

import { createClientComponentClient } from '@supabase/auth-helpers-nextjs';
import { CalendarEventWithDetails } from '@/types/calendar';

export async function getCalendarEvents(
  startDate: Date,
  endDate: Date
): Promise<CalendarEventWithDetails[]> {
  const supabase = createClientComponentClient();

  const { data: events, error } = await supabase
    .from('calendar_events')
    .select(`
      *,
      created_by_user:created_by(email, full_name),
      last_modified_by_user:last_modified_by(email, full_name),
      category
    `)
    .gte('start_time', startDate.toISOString())
    .lte('end_time', endDate.toISOString())
    .order('start_time', { ascending: true });

  if (error) {
    console.error('Error fetching calendar events:', error);
    return [];
  }

  // Assign 'Miscellaneous' to events without a category
  return (events || []).map((event) => ({
    ...event,
    category: event.category || 'Miscellaneous',
  }));
}

export async function createCalendarEvent(
  title: string,
  description: string | null,
  startTime: Date,
  endTime: Date,
  eventType: 'manual' | 'garden_task' = 'manual',
  userId: string,
  fullName?: string | null,
  referenceId?: string
) {
  const supabase = createClientComponentClient();

  // Delete any existing events for this reference if it's a garden task
  if (eventType === 'garden_task' && referenceId) {
    await supabase
      .from('calendar_events')
      .delete()
      .eq('reference_id', referenceId)
      .eq('event_type', 'garden_task');
  }

  const { data, error } = await supabase
    .from('calendar_events')
    .insert({
      title,
      description,
      start_time: startTime.toISOString(),
      end_time: endTime.toISOString(),
      event_type: eventType,
      created_by: userId,
      full_name: fullName,
      reference_id: referenceId,
      category: eventType === 'garden_task' ? 'Garden Task' : 'Miscellaneous',
    })
    .select()
    .single();

  if (error) {
    console.error('Calendar event creation error:', error);
    throw new Error(`Failed to create calendar event: ${error.message}`);
  }

  return data;
}

export async function createGardenTaskEvent(
  title: string,
  description: string,
  dueDate: string,
  scheduledTime: string | null,
  duration: string | null,
  userId: string,
  fullName: string | null,
  taskId: string
) {
  // Create a Date object for the due date
  const date = new Date(dueDate);

  // If there's a scheduled time, parse and set it
  if (scheduledTime) {
    const [hours, minutes] = scheduledTime.split(':');
    date.setHours(parseInt(hours, 10), parseInt(minutes, 10));
  } else {
    // Default to 9 AM if no time specified
    date.setHours(9, 0);
  }

  // Calculate end time based on duration
  const durationMs = parseDuration(duration);

  // End time is start time plus duration
  const endTime = new Date(date.getTime() + durationMs);

  // Create single calendar event
  return createCalendarEvent(
    `Garden Task: ${title}`,
    description,
    date,
    endTime,
    'garden_task',
    userId,
    fullName,
    taskId
  );
}

function parseDuration(durationStr: string | null): number {
  if (!durationStr) {
    return 60 * 60 * 1000; // Default to 1 hour in milliseconds
  }
  const duration = parseFloat(durationStr);
  if (isNaN(duration)) {
    return 60 * 60 * 1000; // Default to 1 hour
  }
  if (duration === 24) {
    return 24 * 60 * 60 * 1000; // All day
  }
  return duration * 60 * 60 * 1000; // Convert hours to milliseconds
}

export async function updateCalendarEvent(
  eventId: string,
  updates: Partial<CalendarEventWithDetails>,
  userId: string
) {
  const supabase = createClientComponentClient();

  const { data, error } = await supabase
    .from('calendar_events')
    .update({ ...updates, last_modified_by: userId })
    .eq('id', eventId)
    .select()
    .single();

  if (error) {
    throw new Error(`Failed to update calendar event: ${error.message}`);
  }

  return data;
}

export async function deleteCalendarEvent(eventId: string) {
  const supabase = createClientComponentClient();

  const { error } = await supabase
    .from('calendar_events')
    .delete()
    .eq('id', eventId);

  if (error) {
    throw new Error(`Failed to delete calendar event: ${error.message}`);
  }
}



================================================================================
// File: stores/calendar-store.ts
================================================================================

// lib/stores/calendar-store.ts

import { create } from 'zustand';

interface CalendarStore {
  selectedEventId: string | null;
  setSelectedEventId: (id: string | null) => void;
}

export const useCalendarStore = create<CalendarStore>((set) => ({
  selectedEventId: null,
  setSelectedEventId: (id) => set({ selectedEventId: id }),
})); 


// Code files extracted from brighton-rock-members/services
// Generated on 2024-11-30 15:20:40
// Included extensions: .tsx, .ts, .js, .jsx, .css, .scss, .sass, .json, .sql
// Excluded files: package-lock.json, yarn.lock, pnpm-lock.yaml, .DS_Store


================================================================================
// File: garden.ts
================================================================================

import { createServerComponentClient } from '@supabase/auth-helpers-nextjs'
import { cookies } from 'next/headers'
import { GardenTaskWithDetails, GardenComment } from '@/types/garden'

interface Profile {
  id: string
  email: string
}

interface CommentWithUser extends GardenComment {
  user: {
    email: string
  }
}

export async function getGardenTask(id: string) {
  try {
    const supabase = createServerComponentClient({ cookies })

    // First get the task with basic comment data
    const { data: task, error } = await supabase
      .from('garden_tasks')
      .select(`
        *,
        area:garden_areas(*),
        comments:garden_comments(
          id,
          comment,
          created_at,
          user_id
        )
      `)
      .eq('id', id)
      .single()

    if (error) {
      console.error('Error fetching Garden Task:', error)
      return null
    }

    // Then fetch user data for each comment
    if (task && task.comments) {
      const userIds = task.comments.map((comment: GardenComment) => comment.user_id)
      
      const { data: profiles, error: profilesError } = await supabase
        .from('profiles')
        .select('id, email')
        .in('id', userIds)

      if (!profilesError && profiles) {
        // Create a map of user_id to profile data
        const userMap = profiles.reduce<Record<string, Profile>>((acc, profile) => {
          acc[profile.id] = profile
          return acc
        }, {})

        // Attach user data to each comment
        task.comments = task.comments.map((comment: GardenComment): CommentWithUser => ({
          ...comment,
          user: userMap[comment.user_id] || { email: 'Unknown User' }
        }))
      }
    }

    return task as GardenTaskWithDetails
  } catch (err) {
    console.error('Error fetching Garden Task:', err)
    return null
  }
} 


================================================================================
// File: tasks.ts
================================================================================

import { createServerComponentClient } from '@supabase/auth-helpers-nextjs'
import { cookies } from 'next/headers'
import { TaskWithDetails, TaskComment } from '@/types/tasks'

interface Profile {
  id: string
  email: string
  full_name: string | null
}

interface CommentWithUser extends TaskComment {
  user: {
    email: string
    full_name?: string | null
  }
}

export async function getTask(id: string) {
  try {
    const supabase = createServerComponentClient({ cookies })

    // First get the task with basic comment data
    const { data: task, error } = await supabase
      .from('tasks')
      .select(`
        *,
        comments:task_comments(
          id,
          comment,
          created_at,
          user_id
        )
      `)
      .eq('id', id)
      .single()

    if (error) {
      console.error('Error fetching Task:', error)
      return null
    }

    // Then fetch user data for each comment and assigned user
    if (task) {
      const userIds = new Set<string>()
      
      // Add assigned user if exists
      if (task.assigned_to) {
        userIds.add(task.assigned_to)
      }
      
      // Add comment users
      if (task.comments) {
        task.comments.forEach((comment: TaskComment) => {
          userIds.add(comment.user_id)
        })
      }

      const { data: profiles, error: profilesError } = await supabase
        .from('profiles')
        .select('id, email, full_name')
        .in('id', Array.from(userIds))

      if (!profilesError && profiles) {
        // Create a map of user_id to profile data
        const userMap = profiles.reduce<Record<string, Profile>>((acc, profile) => {
          acc[profile.id] = profile
          return acc
        }, {})

        // Attach user data to each comment
        if (task.comments) {
          task.comments = task.comments.map((comment: TaskComment): CommentWithUser => ({
            ...comment,
            user: userMap[comment.user_id] || { email: 'Unknown User' }
          }))
        }

        // Attach assigned user data
        if (task.assigned_to) {
          task.assigned_to_user = userMap[task.assigned_to] || null
        }
      }
    }

    return task as TaskWithDetails
  } catch (err) {
    console.error('Error fetching Task:', err)
    return null
  }
}

export async function getTasks(category: string = 'general') {
  try {
    const supabase = createServerComponentClient({ cookies })

    const { data: tasks, error } = await supabase
      .from('tasks')
      .select(`
        *,
        comments:task_comments(count)
      `)
      .eq('category', category)
      .order('created_at', { ascending: false })

    if (error) {
      console.error('Error fetching Tasks:', error)
      return []
    }

    // Fetch user data for assigned users
    const userIds = tasks
      .map(task => task.assigned_to)
      .filter((id): id is string => id !== null)

    if (userIds.length > 0) {
      const { data: profiles, error: profilesError } = await supabase
        .from('profiles')
        .select('id, email, full_name')
        .in('id', userIds)

      if (!profilesError && profiles) {
        // Create a map of user_id to profile data
        const userMap = profiles.reduce<Record<string, Profile>>((acc, profile) => {
          acc[profile.id] = profile
          return acc
        }, {})

        // Attach user data to each task
        tasks.forEach(task => {
          if (task.assigned_to) {
            task.assigned_to_user = userMap[task.assigned_to] || null
          }
        })
      }
    }

    return tasks
  } catch (err) {
    console.error('Error fetching Tasks:', err)
    return []
  }
} 
